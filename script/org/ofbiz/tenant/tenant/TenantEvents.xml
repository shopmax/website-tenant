<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->
<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods.xsd">
    <simple-method method-name="installTenantDataSources" short-description="Install tenant data sources" login-required="true">
        <!-- load framework components -->
        <set field="frameworkComponentLoadPath" value="file://${sys:getProperty('ofbiz.home')}/framework/component-load.xml"/>
        <create-object field="frameworkComponentLoadUrl" class-name="java.net.URL">
            <field field="frameworkComponentLoadPath"/>
        </create-object>
        <call-class-method ret-field="frameworkComponentLoadDoc" method-name="readXmlDocument" class-name="org.ofbiz.base.util.UtilXml">
            <field field="frameworkComponentLoadUrl" type="java.net.URL"/>
        </call-class-method>
        <call-object-method ret-field="frameworkComponentLoadElement" method-name="getDocumentElement" obj-field="frameworkComponentLoadDoc"/>
        <call-class-method ret-field="frameworkLoadComponentElements" method-name="childElementList" class-name="org.ofbiz.base.util.UtilXml">
            <field field="frameworkComponentLoadElement" type="org.w3c.dom.Element"/>
        </call-class-method>
        <call-class-method method-name="newInstance" class-name="javolution.util.FastList" ret-field="loadComponents"/>
        <iterate entry="frameworkLoadComponentElement" list="frameworkLoadComponentElements">
            <call-class-method ret-field="componentName" method-name="elementAttribute" class-name="org.ofbiz.base.util.UtilXml">
                <field field="frameworkLoadComponentElement" type="org.w3c.dom.Element"/>
                <string value="component-location"/>
                <field field="null" type="String"/>
            </call-class-method>
            <call-object-method method-name="add" obj-field="loadComponents">
                <field field="componentName" type="Object"/>
            </call-object-method>
        </iterate>
        
        <!-- get file list from selected components -->
        <entity-and list="tenantComponents" entity-name="TenantComponent">
            <field-map field-name="tenantId" from-field="parameters.tenantId"/>
            <order-by field-name="sequenceNum"/>
        </entity-and>
        <iterate entry="tenantComponent" list="tenantComponents">
            <set field="componentName" from-field="tenantComponent.componentName"/>
            <call-object-method method-name="add" obj-field="loadComponents">
                <field field="componentName" type="java.lang.Object"/>
            </call-object-method>
        </iterate>
        
        <!-- make a reader names -->
        <call-class-method ret-field="readerNames" method-name="split" class-name="org.ofbiz.base.util.StringUtil">
            <field field="parameters.readers"/>
            <string value=","/>
        </call-class-method>
        
        <!-- get a helper name form the group name -->
        <call-object-method method-name="getGroupHelperInfo" obj-field="delegator" ret-field="helperInfo">
            <string value="org.ofbiz"/>
        </call-object-method>
        <call-object-method ret-field="helperName" method-name="getHelperBaseName" obj-field="helperInfo"/>
        
        <!-- get URL list from the component list -->
        <call-class-method ret-field="urlList" method-name="getUrlByComponentList" class-name="org.ofbiz.entity.util.EntityDataLoader">
            <field field="helperName"/>
            <field field="loadComponents" type="java.util.List"/>
            <field field="readerNames" type="java.util.List"/>
        </call-class-method>
        
        <!-- build a String from the list of URL -->
        <create-object class-name="java.lang.StringBuilder" field="filesBuilder"/>
        <iterate entry="url" list="urlList">
            <set field="urlString" value="${groovy:url.toString()}"/>
            <call-object-method method-name="append" obj-field="filesBuilder">
                <field field="urlString"/>
            </call-object-method>
            <call-object-method method-name="append" obj-field="filesBuilder">
                <string value=","/>
            </call-object-method>
        </iterate>
        
        <!-- get rid of the last comma -->
        <set field="files" value="${groovy:filesBuilder.toString().substring(0,filesBuilder.toString().length()-1)}"/>
        
        <!-- install tenant data source -->
        <set-service-fields service-name="installTenantDataSources" to-map="installTenantDataSourcesInMap" map="parameters"/>
        <set field="installTenantDataSourcesInMap.files" from-field="files"/>
        <call-service service-name="installTenantDataSources" in-map-name="installTenantDataSourcesInMap"/>
    </simple-method>
    <simple-method method-name="updateMailListener" short-description="Update Mail Listener" login-required="true">
        <set field="tenantId" from-field="parameters.tenantId"/>
        <if-not-empty field="tenantId">
            
           <!-- update system properties -->
           
           <!-- mail store protocol -->
           <set field="setSystemPropertyInMap.systemResourceId" value="mail"/>
           <set field="setSystemPropertyInMap.systemPropertyId" value="mail.store.protocol"/>
           <set field="setSystemPropertyInMap.systemPropertyValue" from-field="parameters.mailStoreProtocol"/>
           <set field="setSystemPropertyInMap.userLogin" from-field="userLogin"/>
           
           <set field="runTenantServiceInMap.tenantId" from-field="tenantId"/>
           <set field="runTenantServiceInMap.serviceName" value="setSystemProperty"/>
           <set field="runTenantServiceInMap.serviceParameters" from-field="setSystemPropertyInMap"/>
           <set field="runTenantServiceInMap.isAsync" value="false" type="Boolean"/>
           <set field="runTenantServiceInMap.userLogin" from-field="userLogin"/>
           <call-service service-name="runTenantService" in-map-name="runTenantServiceInMap"/>
           <clear-field field="setSystemPropertyInMap"/>
           
           <!-- mail host -->
           <set field="setSystemPropertyInMap.systemResourceId" value="mail"/>
           <set field="setSystemPropertyInMap.systemPropertyId" value="mail.host"/>
           <set field="setSystemPropertyInMap.systemPropertyValue" from-field="parameters.mailHost"/>
           <set field="setSystemPropertyInMap.userLogin" from-field="userLogin"/>
           
           <set field="runTenantServiceInMap.tenantId" from-field="tenantId"/>
           <set field="runTenantServiceInMap.serviceName" value="setSystemProperty"/>
           <set field="runTenantServiceInMap.serviceParameters" from-field="setSystemPropertyInMap"/>
           <set field="runTenantServiceInMap.isAsync" value="false" type="Boolean"/>
           <set field="runTenantServiceInMap.userLogin" from-field="userLogin"/>
           <call-service service-name="runTenantService" in-map-name="runTenantServiceInMap"/>
           <clear-field field="setSystemPropertyInMap"/>
           
           <!-- mail user -->
           <set field="setSystemPropertyInMap.systemResourceId" value="mail"/>
           <set field="setSystemPropertyInMap.systemPropertyId" value="mail.user"/>
           <set field="setSystemPropertyInMap.systemPropertyValue" from-field="parameters.mailUser"/>
           <set field="setSystemPropertyInMap.userLogin" from-field="userLogin"/>
           
           <set field="runTenantServiceInMap.tenantId" from-field="tenantId"/>
           <set field="runTenantServiceInMap.serviceName" value="setSystemProperty"/>
           <set field="runTenantServiceInMap.serviceParameters" from-field="setSystemPropertyInMap"/>
           <set field="runTenantServiceInMap.isAsync" value="false" type="Boolean"/>
           <set field="runTenantServiceInMap.userLogin" from-field="userLogin"/>
           <call-service service-name="runTenantService" in-map-name="runTenantServiceInMap"/>
           <clear-field field="setSystemPropertyInMap"/>
           
           <!-- mail pass -->
           <set field="setSystemPropertyInMap.systemResourceId" value="mail"/>
           <set field="setSystemPropertyInMap.systemPropertyId" value="mail.pass"/>
           <set field="setSystemPropertyInMap.systemPropertyValue" from-field="parameters.mailPass"/>
           <set field="setSystemPropertyInMap.userLogin" from-field="userLogin"/>
           
           <set field="runTenantServiceInMap.tenantId" from-field="tenantId"/>
           <set field="runTenantServiceInMap.serviceName" value="setSystemProperty"/>
           <set field="runTenantServiceInMap.serviceParameters" from-field="setSystemPropertyInMap"/>
           <set field="runTenantServiceInMap.isAsync" value="false" type="Boolean"/>
           <set field="runTenantServiceInMap.userLogin" from-field="userLogin"/>
           <call-service service-name="runTenantService" in-map-name="runTenantServiceInMap"/>
           <clear-field field="setSystemPropertyInMap"/>
        
            <!-- get poll timer -->
            <call-class-method ret-field="pollTimer" method-name="getPollTimer" class-name="org.ofbiz.tenant.mail.TenantJavaMailFactory">
                <field field="tenantId"/>
            </call-class-method>
            <call-object-method method-name="cancel" obj-field="pollTimer"/>
            
            <!-- create a JavaMail listener -->
            <set field="createTenantJavaMailListenerInMap.tenantId" from-field="tenantId"/>
            <set field="createTenantJavaMailListenerInMap.mailStoreProtocol" from-field="parameters.mailStoreProtocol"/>
            <set field="createTenantJavaMailListenerInMap.mailHost" from-field="parameters.mailHost"/>
            <set field="createTenantJavaMailListenerInMap.mailUser" from-field="parameters.mailUser"/>
            <set field="createTenantJavaMailListenerInMap.mailPass" from-field="parameters.mailPass"/>
            <set field="createTenantJavaMailListenerInMap.userLogin" from-field="userLogin"/>
            <call-service service-name="createTenantJavaMailListener" in-map-name="createTenantJavaMailListenerInMap">
                <result-to-field result-name="session"/>
                <result-to-field result-name="store"/>
            </call-service>
            <assert><not><if-empty field="session"></if-empty></not></assert>
            <assert><not><if-empty field="store"></if-empty></not></assert>
            
            <!-- schedule java mail poller task -->
            <set field="scheduleTenantJavaMailPollerTaskInMap.tenantId" from-field="tenantId"/>
            <set field="scheduleTenantJavaMailPollerTaskInMap.maxSize" value="1000000" type="Long"/>
            <set field="scheduleTenantJavaMailPollerTaskInMap.timerDelay" value="300000" type="Long"/>
            <set field="scheduleTenantJavaMailPollerTaskInMap.userLogin" from-field="userLogin"/>
            
            <set field="runTenantServiceInMap.tenantId" from-field="tenantId"/>
            <set field="runTenantServiceInMap.serviceName" value="scheduleTenantJavaMailPollerTask"/>
            <set field="runTenantServiceInMap.serviceParameters" from-field="scheduleTenantJavaMailPollerTaskInMap"/>
            <set field="runTenantServiceInMap.isAsync" value="false" type="Boolean"/>
            <set field="runTenantServiceInMap.userLogin" from-field="userLogin"/>
            <call-service service-name="runTenantService" in-map-name="runTenantServiceInMap"/>
            
            <set field="_event_message_" value="The mail listener for tenant[${parameters.tenantId}] has been scheduled with mail.store.protocol=${parameters.mailStoreProtocol} , mail.host=${parameters.mailHost} , mail.user=${parameters.mailUser}"/>
            <else>
                <add-error><fail-message message="Tenat ID is missing."/></add-error>
                <check-errors/>
            </else>
        </if-not-empty>
    </simple-method>
</simple-methods>
