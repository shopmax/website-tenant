<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods.xsd">
        
    <!-- Tenant -->
    <simple-method method-name="createTenant" short-description="Create a Tenant">
        <make-value value-field="tenant" entity-name="Tenant"/>
        <set-pk-fields value-field="tenant" map="parameters"/>
        <set-nonpk-fields value-field="tenant" map="parameters"/>
        <create-value value-field="tenant"/>
    </simple-method>
    <simple-method method-name="updateTenant" short-description="Update a Tenant">
        <entity-one value-field="tenant" entity-name="Tenant"/>
        <set-nonpk-fields value-field="tenant" map="parameters"/>
        <store-value value-field="tenant"/>
    </simple-method>
    <simple-method method-name="deleteTenant" short-description="Delete a Tenant">
        <entity-one value-field="tenant" entity-name="Tenant"/>
        <!-- Delete tenant dataSources -->
        <entity-and list="tenantDataSources" entity-name="TenantDataSource">
            <field-map field-name="tenantId" from-field="tenant.tenantId"/>
        </entity-and>
        <remove-list list="tenantDataSources"/>
        <!-- Delete tenant components -->
        <entity-and list="tenantComponents" entity-name="TenantComponent">
            <field-map field-name="tenantId" from-field="tenant.tenantId"/>
        </entity-and>
        <remove-list list="tenantComponents"/>
        <!-- Delete a tenant -->
        <remove-value value-field="tenant"/>
    </simple-method>
    
    <!-- Tenant Domain Name -->
    <simple-method method-name="createTenantDomainName" short-description="Create a Tenant Domain Name">
        <!-- trim parameters before creating-->
        <call-object-method obj-field="parameters.domainName" method-name="trim" ret-field="parameters.domainName"/>
        
        <make-value value-field="tenantDomainName" entity-name="TenantDomainName"/>
        <set-pk-fields value-field="tenantDomainName" map="parameters"/>
        <set-nonpk-fields value-field="tenantDomainName" map="parameters"/>
        <create-value value-field="tenantDomainName"/>
    </simple-method>
    <simple-method method-name="updateTenantDomainName" short-description="Update a Tenant Domain Name">
        <!-- trim parameters before creating-->
        <call-object-method obj-field="parameters.domainName" method-name="trim" ret-field="parameters.domainName"/>
        
        <entity-one value-field="tenantDomainName" entity-name="TenantDomainName"/>
        <set-nonpk-fields value-field="tenantDomainName" map="parameters"/>
        <store-value value-field="tenantDomainName"/>
    </simple-method>
    <simple-method method-name="deleteTenantDomainName" short-description="Delete a Tenant Domain Name">
        <entity-one value-field="tenantDomainName" entity-name="TenantDomainName"/>
        <remove-value value-field="tenantDomainName"/>
    </simple-method>
    
    <!-- Tenant Data Resource -->
    <simple-method method-name="createTenantDataSource" short-description="Create a Tenant Data Source" use-transaction="false">
        <!-- trim parameters before creating-->
        <call-object-method obj-field="parameters.entityGroupName" method-name="trim" ret-field="parameters.entityGroupName"/>
        <call-object-method obj-field="parameters.jdbcUri" method-name="trim" ret-field="parameters.jdbcUri"/>
        
        <transaction-begin began-transaction-name="beganTransaction"/>
        <make-value value-field="tenantDataSource" entity-name="TenantDataSource"/>
        <set-pk-fields value-field="tenantDataSource" map="parameters"/>
        <set-nonpk-fields value-field="tenantDataSource" map="parameters"/>
        <create-value value-field="tenantDataSource"/>
        
        <call-class-method method-name="getStatusString" class-name="org.ofbiz.entity.transaction.TransactionUtil" ret-field="transactionStatus"/>
        <call-class-method method-name="getStatus" class-name="org.ofbiz.entity.transaction.TransactionUtil" ret-field="transactionStatus"/>
        <set field="statusActive" value="${groovy:org.ofbiz.entity.transaction.TransactionUtil.STATUS_ACTIVE}" type="Integer"/>
        <if-compare-field field="transactionStatus" operator="equals" to-field="statusActive" type="Integer">
            <transaction-commit/>
        </if-compare-field>
    </simple-method>
    <simple-method method-name="updateTenantDataSource" short-description="Update a Tenant Data Source" use-transaction="false">
        <!-- trim parameters before creating-->
        <call-object-method obj-field="parameters.jdbcUri" method-name="trim" ret-field="parameters.jdbcUri"/>
        <call-object-method obj-field="parameters.jdbcUsername" method-name="trim" ret-field="parameters.jdbcUsername"/>
        <call-object-method obj-field="parameters.jdbcPassword" method-name="trim" ret-field="parameters.jdbcPassword"/>
        
        <transaction-begin began-transaction-name="beganTransaction"/>
        <entity-one value-field="tenantDataSource" entity-name="TenantDataSource"/>
        <set-nonpk-fields value-field="tenantDataSource" map="parameters"/>
        <store-value value-field="tenantDataSource"/>
        <transaction-commit began-transaction-name="beganTransaction"/>
    </simple-method>
    <simple-method method-name="deleteTenantDataSource" short-description="Delete a Tenant Data Source" use-transaction="false">
        <transaction-begin began-transaction-name="beganTransaction"/>
        <entity-one value-field="tenantDataSource" entity-name="TenantDataSource"/>
        <remove-value value-field="tenantDataSource"/>
        <transaction-commit began-transaction-name="beganTransaction"/>
    </simple-method>
    
    <!-- Tenant Component -->
    <simple-method method-name="createTenantComponent" short-description="Create a Tenant Component">
        <!-- trim parameters before creating-->
        <call-object-method obj-field="parameters.tenantComponentName" method-name="trim" ret-field="parameters.tenantComponentName"/>
        
        <!-- check if component is exist -->
        <set field="parameters.componentName" from-field="parameters.tenantComponentName"/>
        <entity-one value-field="component" entity-name="Component"/>
        <if-not-empty field="component">
            <make-value value-field="tenantComponent" entity-name="TenantComponent"/>
            <set-pk-fields value-field="tenantComponent" map="parameters"/>
            <set-nonpk-fields value-field="tenantComponent" map="parameters"/>
            <create-value value-field="tenantComponent"/>
            <else>
                <add-error><fail-message message="Could not find a component: ${parameters.componentName}"/></add-error>
                <check-errors/>
            </else>
        </if-not-empty>
    </simple-method>
    <simple-method method-name="updateTenantComponent" short-description="Update a Tenant Component">
        <!-- check if component is exist -->
        <set field="parameters.componentName" from-field="parameters.tenantComponentName"/>
        <entity-one value-field="component" entity-name="Component"/>
        <if-not-empty field="component">
            <entity-one value-field="tenantComponent" entity-name="TenantComponent"/>
            <set-nonpk-fields value-field="tenantComponent" map="parameters"/>
            <store-value value-field="tenantComponent"/>
            <else>
                <add-error><fail-message message="Could not find a component: ${parameters.componentName}"/></add-error>
                <check-errors/>
            </else>
        </if-not-empty>
    </simple-method>
    <simple-method method-name="deleteTenantComponent" short-description="Delete a Tenant Component">
        <!-- check if component is exist -->
        <set field="parameters.componentName" from-field="parameters.tenantComponentName"/>
        <entity-one value-field="component" entity-name="Component"/>
        <if-not-empty field="component">
            <entity-one value-field="tenantComponent" entity-name="TenantComponent"/>
            <remove-value value-field="tenantComponent"/>
            <else>
                <add-error><fail-message message="Could not find a component: ${parameters.componentName}"/></add-error>
                <check-errors/>
            </else>
        </if-not-empty>
    </simple-method>
    
    <!-- create JavaMail listener -->
    <simple-method method-name="createTenantJavaMailListener" short-description="Create a JavaMail listener for a tenant">
        <create-object field="props" class-name="java.util.Properties"/>
        
        <!-- mail store protocol -->
        <call-object-method method-name="setProperty" obj-field="props">
            <string value="mail.store.protocol"/>
            <field field="parameters.mailStoreProtocol" type="String"/>
        </call-object-method>
        
        <!-- mail host -->
        <call-object-method method-name="setProperty" obj-field="props">
            <string value="mail.host"/>
            <field field="parameters.mailHost" type="String"/>
        </call-object-method>
        
        <!-- mail user -->
        <call-object-method method-name="setProperty" obj-field="props">
            <string value="mail.user"/>
            <field field="parameters.mailUser" type="String"/>
        </call-object-method>
        
        <!-- mail pass -->
        <call-object-method method-name="setProperty" obj-field="props">
            <string value="mail.pass"/>
            <field field="parameters.mailPass" type="String"/>
        </call-object-method>
        
        <!-- mail debug -->
        <call-object-method method-name="setProperty" obj-field="props">
            <string value="mail.debug"/>
            <string value="true"/>
        </call-object-method>
        
        <!-- get session -->
        <call-class-method ret-field="session" method-name="getInstance" class-name="javax.mail.Session">
            <field field="props" type="java.util.Properties"/>
        </call-class-method>
        
        <!-- get store -->
        <call-object-method ret-field="store" method-name="getStore" obj-field="session"/>
        
        <!-- re-write the URLName including the password for this store -->
        <if-not-empty field="store">
            <call-object-method ret-field="urlName" method-name="getURLName" obj-field="store"/>
            <if-not-empty field="urlName">
                <set field="protocol" from-field="parameters.mailStoreProtocol"/>
                <set field="username" from-field="parameters.mailUser"/>
                <set field="password" from-field="parameters.mailPass"/>
                <set field="host" from-field="parameters.mailHost"/>
                <call-object-method ret-field="file" method-name="getFile" obj-field="urlName"/>
                <call-object-method ret-field="port" method-name="getPort" obj-field="urlName"/>
                
                <call-bsh><![CDATA[
                    import javax.mail.URLName;
                    urlName = new URLName(protocol, host, port, file, username, password);
                    parameters.put("urlName", urlName);
                ]]></call-bsh>
                <set field="urlName" from-field="parameters.urlName"/>
            </if-not-empty>
            <call-object-method ret-field="store" method-name="getStore" obj-field="session">
                <field field="urlName" type="javax.mail.URLName"/>
            </call-object-method>
        </if-not-empty>
        
        <if-empty field="store">
            <add-error><fail-message message="No store configured!"/></add-error>
            <check-errors/>
        </if-empty>
        
        <!-- test store -->
        <call-object-method method-name="connect" obj-field="store"/>
        <call-object-method method-name="close" obj-field="store"/>
        
        <!-- add logging store listener -->
        <if-not-empty field="store">
            <create-object field="loggingStoreListener" class-name="org.ofbiz.tenant.mail.TenantLoggingStoreListener"/>
            <call-object-method method-name="addStoreListener" obj-field="store">
                <field field="loggingStoreListener" type="javax.mail.event.StoreListener"/>
            </call-object-method>
        </if-not-empty>
        
        <!-- set session to factory -->
        <call-class-method method-name="setSession" class-name="org.ofbiz.tenant.mail.TenantJavaMailFactory">
            <field field="parameters.tenantId"/>
            <field field="session" type="javax.mail.Session"/>
        </call-class-method>
        
        <!-- set store to factory -->
        <call-class-method method-name="setStore" class-name="org.ofbiz.tenant.mail.TenantJavaMailFactory">
            <field field="parameters.tenantId"/>
            <field field="store" type="javax.mail.Store"/>
        </call-class-method>
        
        <field-to-result field="session" result-name="session"/>
        <field-to-result field="store" result-name="store"/>
    </simple-method>
    
    <!-- schedule JavaMail poller task-->
    <simple-method method-name="scheduleTenantJavaMailPollerTask" short-description="Schedule JavaMail poller task for a tenant">
        <call-class-method ret-field="session" method-name="getSession" class-name="org.ofbiz.tenant.mail.TenantJavaMailFactory">
            <field field="parameters.tenantId"/>
        </call-class-method>
        <call-class-method ret-field="store" method-name="getStore" class-name="org.ofbiz.tenant.mail.TenantJavaMailFactory">
            <field field="parameters.tenantId"/>
        </call-class-method>
        <call-class-method ret-field="pollTimer" method-name="getPollTimer" class-name="org.ofbiz.tenant.mail.TenantJavaMailFactory">
            <field field="parameters.tenantId"/>
        </call-class-method>
        <set field="maxSize" from-field="parameters.maxSize"/>
        <set field="timerDelay" from-field="parameters.timerDelay"/>
        
        <call-bsh><![CDATA[
            import org.ofbiz.tenant.mail.TenantPollerTask;
            pollTimer.schedule(new TenantPollerTask(store, session, maxSize, dispatcher, userLogin), timerDelay, timerDelay);
        ]]></call-bsh>
    </simple-method>
    
    <!-- cancel JavaMail poller task-->
    <simple-method method-name="cancelTenantJavaMailPollerTask" short-description="Cancel JavaMail poller task for a tenant">
        <call-class-method ret-field="pollTimer" method-name="getPollTimer" class-name="org.ofbiz.tenant.mail.TenantJavaMailFactory">
            <field field="parameters.tenantId"/>
        </call-class-method>
        <if-not-empty field="pollTimer">
            <call-object-method method-name="cancel" obj-field="pollTimer"/>
        </if-not-empty>
    </simple-method>
    
    <!-- set system property-->
    <simple-method method-name="setSystemProperty" short-description="Set a system property">
        <entity-one value-field="systemProperty" entity-name="SystemProperty">
            <field-map field-name="systemResourceId" from-field="parameters.systemResourceId"/>
            <field-map field-name="systemPropertyId" from-field="parameters.systemPropertyId"/>
        </entity-one>
        <if-not-empty field="systemProperty">
            <if-compare field="systemProperty.systemPropertyValue" operator="not-equals" value="parameters.systemPropertyValue">
                <set field="systemProperty.systemPropertyValue" from-field="parameters.systemPropertyValue"/>
                <store-value value-field="systemProperty"/>
            </if-compare>
            <else>
                <make-value value-field="systemProperty" entity-name="SystemProperty"/>
                <set field="systemProperty.systemResourceId" from-field="parameters.systemResourceId"/>
                <set field="systemProperty.systemPropertyId" from-field="parameters.systemPropertyId"/>
                <set field="systemProperty.systemPropertyValue" from-field="parameters.systemPropertyValue"/>
                <create-value value-field="systemProperty"/>
            </else>
        </if-not-empty>
    </simple-method>
</simple-methods>
