<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods.xsd">
    <simple-method method-name="createTenant" short-description="Create a Tenant">
        <make-value value-field="tenant" entity-name="Tenant"/>
        <set-pk-fields value-field="tenant" map="parameters"/>
        <set-nonpk-fields value-field="tenant" map="parameters"/>
        <create-value value-field="tenant"/>
    </simple-method>
    <simple-method method-name="updateTenant" short-description="Update a Tenant">
        <entity-one value-field="tenant" entity-name="Tenant"/>
        <set-nonpk-fields value-field="tenant" map="parameters"/>
        <store-value value-field="tenant"/>
    </simple-method>
    <simple-method method-name="deleteTenant" short-description="Delete a Tenant">
        <entity-one value-field="tenant" entity-name="Tenant"/>
        <!-- Delete tenant dataSources -->
        <entity-and list="tenantDataSources" entity-name="TenantDataSource">
            <field-map field-name="tenantId" from-field="tenant.tenantId"/>
        </entity-and>
        <remove-list list="tenantDataSources"/>
        <!-- Delete tenant components -->
        <entity-and list="tenantComponents" entity-name="TenantComponent">
            <field-map field-name="tenantId" from-field="tenant.tenantId"/>
        </entity-and>
        <remove-list list="tenantComponents"/>
        <!-- Delete a tenant -->
        <remove-value value-field="tenant"/>
    </simple-method>
    <simple-method method-name="createTenantDataSource" short-description="Create a Tenant Data Source" use-transaction="false">
        <!-- trim parameters before creating-->
        <call-object-method obj-field="parameters.entityGroupName" method-name="trim" ret-field="parameters.entityGroupName"/>
        <call-object-method obj-field="parameters.jdbcUri" method-name="trim" ret-field="parameters.jdbcUri"/>
        
        <transaction-begin began-transaction-name="beganTransaction"/>
        <make-value value-field="tenantDataSource" entity-name="TenantDataSource"/>
        <set-pk-fields value-field="tenantDataSource" map="parameters"/>
        <set-nonpk-fields value-field="tenantDataSource" map="parameters"/>
        <create-value value-field="tenantDataSource"/>
        
        <call-class-method method-name="getStatusString" class-name="org.ofbiz.entity.transaction.TransactionUtil" ret-field="transactionStatus"/>
        <call-class-method method-name="getStatus" class-name="org.ofbiz.entity.transaction.TransactionUtil" ret-field="transactionStatus"/>
        <set field="statusActive" value="${groovy:org.ofbiz.entity.transaction.TransactionUtil.STATUS_ACTIVE}" type="Integer"/>
        <if-compare-field field="transactionStatus" operator="equals" to-field="statusActive" type="Integer">
            <transaction-commit/>
        </if-compare-field>
    </simple-method>
    <simple-method method-name="updateTenantDataSource" short-description="Update a Tenant Data Source" use-transaction="false">
        <!-- trim parameters before creating-->
        <call-object-method obj-field="parameters.jdbcUri" method-name="trim" ret-field="parameters.jdbcUri"/>
        <call-object-method obj-field="parameters.jdbcUsername" method-name="trim" ret-field="parameters.jdbcUsername"/>
        <call-object-method obj-field="parameters.jdbcPassword" method-name="trim" ret-field="parameters.jdbcPassword"/>
        
        <transaction-begin began-transaction-name="beganTransaction"/>
        <entity-one value-field="tenantDataSource" entity-name="TenantDataSource"/>
        <set-nonpk-fields value-field="tenantDataSource" map="parameters"/>
        <store-value value-field="tenantDataSource"/>
        <transaction-commit began-transaction-name="beganTransaction"/>
    </simple-method>
    <simple-method method-name="deleteTenantDataSource" short-description="Delete a Tenant Data Source" use-transaction="false">
        <transaction-begin began-transaction-name="beganTransaction"/>
        <entity-one value-field="tenantDataSource" entity-name="TenantDataSource"/>
        <remove-value value-field="tenantDataSource"/>
        <transaction-commit began-transaction-name="beganTransaction"/>
    </simple-method>
    
    <simple-method method-name="createTenantComponent" short-description="Create a Tenant Component">
        <!-- trim parameters before creating-->
        <call-object-method obj-field="parameters.tenantComponentName" method-name="trim" ret-field="parameters.tenantComponentName"/>
        
        <!-- check if component is exist -->
        <set field="parameters.componentName" from-field="parameters.tenantComponentName"/>
        <entity-one value-field="component" entity-name="Component"/>
        <if-not-empty field="component">
            <make-value value-field="tenantComponent" entity-name="TenantComponent"/>
            <set-pk-fields value-field="tenantComponent" map="parameters"/>
            <set-nonpk-fields value-field="tenantComponent" map="parameters"/>
            <create-value value-field="tenantComponent"/>
            <else>
                <add-error><fail-message message="Could not find a component: ${parameters.componentName}"/></add-error>
                <check-errors/>
            </else>
        </if-not-empty>
    </simple-method>
    <simple-method method-name="updateTenantComponent" short-description="Update a Tenant Component">
        <!-- check if component is exist -->
        <set field="parameters.componentName" from-field="parameters.tenantComponentName"/>
        <entity-one value-field="component" entity-name="Component"/>
        <if-not-empty field="component">
            <entity-one value-field="tenantComponent" entity-name="TenantComponent"/>
            <set-nonpk-fields value-field="tenantComponent" map="parameters"/>
            <store-value value-field="tenantComponent"/>
            <else>
                <add-error><fail-message message="Could not find a component: ${parameters.componentName}"/></add-error>
                <check-errors/>
            </else>
        </if-not-empty>
    </simple-method>
    <simple-method method-name="deleteTenantComponent" short-description="Delete a Tenant Component">
        <!-- check if component is exist -->
        <set field="parameters.componentName" from-field="parameters.tenantComponentName"/>
        <entity-one value-field="component" entity-name="Component"/>
        <if-not-empty field="component">
            <entity-one value-field="tenantComponent" entity-name="TenantComponent"/>
            <remove-value value-field="tenantComponent"/>
            <else>
                <add-error><fail-message message="Could not find a component: ${parameters.componentName}"/></add-error>
                <check-errors/>
            </else>
        </if-not-empty>
    </simple-method>
</simple-methods>
