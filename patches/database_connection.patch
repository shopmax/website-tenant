Index: framework/entity/src/org/ofbiz/entity/connection/DBCPConnectionFactory.java
===================================================================
--- framework/entity/src/org/ofbiz/entity/connection/DBCPConnectionFactory.java	(revision 1494467)
+++ framework/entity/src/org/ofbiz/entity/connection/DBCPConnectionFactory.java	(working copy)
@@ -22,6 +22,7 @@
 import java.sql.Driver;
 import java.sql.SQLException;
 import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.Properties;
 import java.util.concurrent.ConcurrentHashMap;
@@ -53,6 +54,8 @@
 
     public static final String module = DBCPConnectionFactory.class.getName();
     protected static final ConcurrentHashMap<String, ManagedDataSource> dsCache = new ConcurrentHashMap<String, ManagedDataSource>();
+    protected static Map<String, XAConnectionFactory> xacfCache = new LinkedHashMap<String, XAConnectionFactory>();
+    protected static Map<String, GenericObjectPool> gopCache = new LinkedHashMap<String, GenericObjectPool>();
 
     public Connection getConnection(GenericHelperInfo helperInfo, JdbcElement abstractJdbc) throws SQLException, GenericEntityException {
         String cacheKey = helperInfo.getHelperFullName();
@@ -139,15 +142,29 @@
         // cache the pool
         dsCache.putIfAbsent(cacheKey, mds);
         mds = dsCache.get(cacheKey);
+            xacfCache.put(helperInfo.getHelperFullName(), xacf);
+            gopCache.put(helperInfo.getHelperFullName(), pool);
 
         return TransactionFactory.getCursorConnection(helperInfo, mds.getConnection());
     }
+    
+    public void removeConnection(GenericHelperInfo helperInfo) {
+        dsCache.remove(helperInfo.getHelperFullName());
+    }
 
     public void closeAll() {
         // no methods on the pool to shutdown; so just clearing for GC
         // Hmm... then how do we close the JDBC connections?
         dsCache.clear();
     }
+    
+    public XAConnectionFactory getXAConnectionFactory(GenericHelperInfo helperInfo) {
+        return xacfCache.get(helperInfo.getHelperFullName());
+    }
+    
+    public GenericObjectPool getGenericObjectPool(GenericHelperInfo helperInfo) {
+        return gopCache.get(helperInfo.getHelperFullName());
+    }
 
     public static Map<String, Object> getDataSourceInfo(String helperName) {
         Map<String, Object> dataSourceInfo = new HashMap<String, Object>();
Index: framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java
===================================================================
--- framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java	(revision 1494467)
+++ framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java	(working copy)
@@ -82,6 +82,7 @@
 
     boolean isLegacy = false;
     protected ExecutorService executor;
+    protected List<Connection> connections = new LinkedList<Connection>();
 
     // OFBiz DatabaseUtil
     public DatabaseUtil(GenericHelperInfo helperInfo) {
@@ -144,6 +145,9 @@
                 throw new GenericEntityException("No connection avaialble for URL [" + connectionUrl + "]");
             }
         }
+        
+        connections.add(connection);
+        
         if (!TransactionUtil.isTransactionInPlace()) {
             connection.setAutoCommit(true);
         }
@@ -3192,6 +3196,18 @@
             }
         }
     }
+    
+    public void close() {
+        for (Connection connection : connections) {
+            try {
+                if (!connection.isClosed()) {
+                    connection.close();
+                }
+            } catch (SQLException e) {
+                Debug.logWarning("Could not close connection: " + connection, module);
+            }
+        }
+    }
 
     /* ====================================================================== */
     /* ====================================================================== */
Index: framework/entityext/src/org/ofbiz/entityext/data/EntityDataServices.java
===================================================================
--- framework/entityext/src/org/ofbiz/entityext/data/EntityDataServices.java	(revision 1494467)
+++ framework/entityext/src/org/ofbiz/entityext/data/EntityDataServices.java	(working copy)
@@ -407,6 +407,8 @@
         // step 8 - checkdb
         Debug.logImportant("Running DB check with add missing enabled", module);
         dbUtil.checkDb(modelEntities, messages, true);
+        
+        dbUtil.close();
 
         Map<String, Object> result = ServiceUtil.returnSuccess();
         result.put("messages", messages);
Index: framework/entity/src/org/ofbiz/entity/config/model/Datasource.java
===================================================================
--- framework/entity/src/org/ofbiz/entity/config/model/Datasource.java	(revision 1494467)
+++ framework/entity/src/org/ofbiz/entity/config/model/Datasource.java	(working copy)
@@ -78,9 +78,9 @@
     private final int maxWorkerPoolSize; // type = xs:integer
     private final List<SqlLoadPath> sqlLoadPathList; // <sql-load-path>
     private final List<ReadData> readDataList; // <read-data>
-    private final InlineJdbc inlineJdbc; // <inline-jdbc>
     private final JndiJdbc jndiJdbc; // <jndi-jdbc>
     private final TyrexDataSource tyrexDataSource; // <tyrex-dataSource>
+    public InlineJdbc inlineJdbc; // <inline-jdbc>
 
     Datasource(Element element) throws GenericEntityConfException {
         String lineNumberText = EntityConfigUtil.createConfigFileLineNumberText(element);
Index: framework/entity/src/org/ofbiz/entity/config/model/InlineJdbc.java
===================================================================
--- framework/entity/src/org/ofbiz/entity/config/model/InlineJdbc.java	(revision 1494467)
+++ framework/entity/src/org/ofbiz/entity/config/model/InlineJdbc.java	(working copy)
@@ -32,7 +32,7 @@
 public final class InlineJdbc extends JdbcElement {
 
     private final String jdbcDriver; // type = xs:string
-    private final String jdbcUri; // type = xs:string
+    private String jdbcUri; // type = xs:string
     private final String jdbcUsername; // type = xs:string
     private final String jdbcPassword; // type = xs:string
     private final String jdbcPasswordLookup; // type = xs:string
@@ -225,4 +225,11 @@
     public String getPoolXaWrapperClass() {
         return this.poolXaWrapperClass;
     }
+    /**
+     * Set JDBC URI
+     * @param jdbcUri
+     */
+    public void setJdbcUri(String jdbcUri) {
+    	this.jdbcUri = jdbcUri;
+    }
 }
Index: framework/entity/src/org/ofbiz/entity/jdbc/ConnectionFactory.java
===================================================================
--- framework/entity/src/org/ofbiz/entity/jdbc/ConnectionFactory.java	(revision 1494467)
+++ framework/entity/src/org/ofbiz/entity/jdbc/ConnectionFactory.java	(working copy)
@@ -101,7 +101,7 @@
         return con;
     }
 
-    private static ConnectionFactoryInterface getManagedConnectionFactory() {
+    public static ConnectionFactoryInterface getManagedConnectionFactory() {
         ConnectionFactoryInterface instance = connFactoryRef.get();
         if (instance == null) {
             try {
