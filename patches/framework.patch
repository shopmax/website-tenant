Index: framework/entityext/src/org/ofbiz/entityext/data/EntityDataLoadContainer.java
===================================================================
--- framework/entityext/src/org/ofbiz/entityext/data/EntityDataLoadContainer.java	(revision 1236036)
+++ framework/entityext/src/org/ofbiz/entityext/data/EntityDataLoadContainer.java	(working copy)
@@ -564,6 +564,8 @@
                 }
             }
         }
+
+        dbUtil.close();
     }
     /**
      * @see org.ofbiz.base.container.Container#stop()
Index: framework/entityext/src/org/ofbiz/entityext/data/EntityDataServices.java
===================================================================
--- framework/entityext/src/org/ofbiz/entityext/data/EntityDataServices.java	(revision 1236036)
+++ framework/entityext/src/org/ofbiz/entityext/data/EntityDataServices.java	(working copy)
@@ -407,6 +407,8 @@
         // step 8 - checkdb
         Debug.logImportant("Running DB check with add missing enabled", module);
         dbUtil.checkDb(modelEntities, messages, true);
+        
+        dbUtil.close();
 
         Map<String, Object> result = ServiceUtil.returnSuccess();
         result.put("messages", messages);
Index: framework/entity/src/org/ofbiz/entity/datasource/GenericDAO.java
===================================================================
--- framework/entity/src/org/ofbiz/entity/datasource/GenericDAO.java	(revision 1236036)
+++ framework/entity/src/org/ofbiz/entity/datasource/GenericDAO.java	(working copy)
@@ -1212,11 +1212,14 @@
     public void checkDb(Map<String, ModelEntity> modelEntities, List<String> messages, boolean addMissing) {
         DatabaseUtil dbUtil = new DatabaseUtil(this.helperInfo, this.executor);
         dbUtil.checkDb(modelEntities, messages, addMissing);
+        dbUtil.close();
     }
 
     /** Creates a list of ModelEntity objects based on meta data from the database */
     public List<ModelEntity> induceModelFromDb(Collection<String> messages) {
         DatabaseUtil dbUtil = new DatabaseUtil(this.helperInfo, this.executor);
-        return dbUtil.induceModelFromDb(messages);
+        List<ModelEntity> modelEntities = dbUtil.induceModelFromDb(messages);
+        dbUtil.close();
+        return modelEntities;
     }
 }
Index: framework/entity/src/org/ofbiz/entity/connection/DBCPConnectionFactory.java
===================================================================
--- framework/entity/src/org/ofbiz/entity/connection/DBCPConnectionFactory.java	(revision 1236036)
+++ framework/entity/src/org/ofbiz/entity/connection/DBCPConnectionFactory.java	(working copy)
@@ -18,6 +18,16 @@
  *******************************************************************************/
 package org.ofbiz.entity.connection;
 
+import java.sql.Connection;
+import java.sql.Driver;
+import java.sql.SQLException;
+import java.util.Map;
+import java.util.Properties;
+
+import javax.transaction.TransactionManager;
+
+import javolution.util.FastMap;
+
 import org.apache.commons.dbcp.ConnectionFactory;
 import org.apache.commons.dbcp.DriverConnectionFactory;
 import org.apache.commons.dbcp.PoolableConnectionFactory;
@@ -32,15 +42,6 @@
 import org.ofbiz.entity.transaction.TransactionFactory;
 import org.w3c.dom.Element;
 
-import javax.transaction.TransactionManager;
-import java.sql.Connection;
-import java.sql.Driver;
-import java.sql.SQLException;
-import java.util.Map;
-import java.util.Properties;
-
-import javolution.util.FastMap;
-
 /**
  * DBCPConnectionFactory
  */
@@ -48,6 +49,8 @@
 
     public static final String module = DBCPConnectionFactory.class.getName();
     protected static Map<String, ManagedDataSource> dsCache = FastMap.newInstance();
+    protected static Map<String, XAConnectionFactory> xacfCache = FastMap.newInstance();
+    protected static Map<String, GenericObjectPool> gopCache = FastMap.newInstance();
 
     public Connection getConnection(GenericHelperInfo helperInfo, Element jdbcElement) throws SQLException, GenericEntityException {
         ManagedDataSource mds = dsCache.get(helperInfo.getHelperFullName());
@@ -171,13 +174,27 @@
 
             // cache the pool
             dsCache.put(helperInfo.getHelperFullName(), mds);
+            xacfCache.put(helperInfo.getHelperFullName(), xacf);
+            gopCache.put(helperInfo.getHelperFullName(), pool);
 
             return TransactionFactory.getCursorConnection(helperInfo, mds.getConnection());
         }
     }
+    
+    public void removeConnection(GenericHelperInfo helperInfo) {
+        dsCache.remove(helperInfo.getHelperFullName());
+    }
 
     public void closeAll() {
         // no methods on the pool to shutdown; so just clearing for GC
         dsCache.clear();
     }
+    
+    public XAConnectionFactory getXAConnectionFactory(GenericHelperInfo helperInfo) {
+        return xacfCache.get(helperInfo.getHelperFullName());
+    }
+    
+    public GenericObjectPool getGenericObjectPool(GenericHelperInfo helperInfo) {
+        return gopCache.get(helperInfo.getHelperFullName());
+    }
 }
Index: framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java
===================================================================
--- framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java	(revision 1236036)
+++ framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java	(working copy)
@@ -83,6 +83,7 @@
 
     boolean isLegacy = false;
     protected ExecutorService executor;
+    protected List<Connection> connections = FastList.newInstance();
 
     // OFBiz DatabaseUtil
     public DatabaseUtil(GenericHelperInfo helperInfo) {
@@ -145,6 +146,9 @@
                 throw new GenericEntityException("No connection avaialble for URL [" + connectionUrl + "]");
             }
         }
+        
+        connections.add(connection);
+        
         if (!TransactionUtil.isTransactionInPlace()) {
             connection.setAutoCommit(true);
         }
@@ -3203,6 +3207,18 @@
             }
         }
     }
+    
+    public void close() {
+        for (Connection connection : connections) {
+            try {
+                if (!connection.isClosed()) {
+                    connection.close();
+                }
+            } catch (SQLException e) {
+                Debug.logWarning("Could not close connection: " + connection, module);
+            }
+        }
+    }
 
     /* ====================================================================== */
     /* ====================================================================== */
Index: framework/entity/src/org/ofbiz/entity/DelegatorFactory.java
===================================================================
--- framework/entity/src/org/ofbiz/entity/DelegatorFactory.java	(revision 1236036)
+++ framework/entity/src/org/ofbiz/entity/DelegatorFactory.java	(working copy)
@@ -56,4 +56,8 @@
             delegatorCache.putIfAbsent(delegatorName, delegator);
         } while (true);
     }
+    
+    public static void removeDelegator(String delegatorName) {
+        delegatorCache.remove(delegatorName);
+    }
 }
Index: framework/entity/entitydef/entitygroup.xml
===================================================================
--- framework/entity/entitydef/entitygroup.xml	(revision 1236036)
+++ framework/entity/entitydef/entitygroup.xml	(working copy)
@@ -29,4 +29,5 @@
 <!--     <entity-group group="org.ofbiz.tenant" entity="TenantUserLogin"/> -->
     <entity-group group="org.ofbiz.tenant" entity="Component"/>
     <entity-group group="org.ofbiz.tenant" entity="TenantComponent"/>
+    <entity-group group="org.ofbiz.tenant" entity="TenantDomainName"/>
 </entitygroup>
Index: framework/entity/entitydef/entitymodel.xml
===================================================================
--- framework/entity/entitydef/entitymodel.xml	(revision 1236036)
+++ framework/entity/entitydef/entitymodel.xml	(working copy)
@@ -66,8 +66,6 @@
     <entity entity-name="Tenant" package-name="org.ofbiz.entity.tenant">
         <field name="tenantId" type="id-ne"/>
         <field name="tenantName" type="name"/>
-        <field name="domainName" type="long-varchar"/>
-        <field name="initialPath" type="value"/>
         <field name="disabled" type="indicator"><description>Disabled if 'Y', defaults to 'N' (not disabled).</description></field>
         <prim-key field="tenantId"/>
     </entity>
@@ -141,4 +139,14 @@
             <key-map field-name="componentName"/>
         </relation>
     </entity>
+    <entity entity-name="TenantDomainName" package-name="org.ofbiz.entity.tenant">
+        <field name="tenantId" type="id-ne"/>
+        <field name="domainName" type="long-varchar"/>
+        <field name="initialPath" type="value"/>
+        <prim-key field="tenantId"/>
+        <prim-key field="domainName"/>
+        <relation type="one" fk-name="TNTDMN_TNT" rel-entity-name="Tenant">
+            <key-map field-name="tenantId"/>
+        </relation>
+    </entity>
 </entitymodel>
Index: framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java
===================================================================
--- framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java	(revision 1236036)
+++ framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java	(working copy)
@@ -645,9 +645,11 @@
         if (currCatalog != null) session.setAttribute("CURRENT_CATALOG_ID", currCatalog);
         if (delegatorName != null) {
             // if there is a tenantId in the delegatorName remove it now so that tenant selection doesn't last beyond logout
+            /*
             if (delegatorName.indexOf('#') > 0) {
                 delegatorName = delegatorName.substring(0, delegatorName.indexOf('#'));
             }
+            */
             session.setAttribute("delegatorName", delegatorName);
 
             delegator = DelegatorFactory.getDelegator(delegatorName);
Index: framework/webapp/src/org/ofbiz/webapp/control/ContextFilter.java
===================================================================
--- framework/webapp/src/org/ofbiz/webapp/control/ContextFilter.java	(revision 1236036)
+++ framework/webapp/src/org/ofbiz/webapp/control/ContextFilter.java	(working copy)
@@ -280,16 +280,28 @@
             // get tenant delegator by domain name
             String serverName = httpRequest.getServerName();
             try {
+                // first set the delegator to default
+                String delegatorName = config.getServletContext().getInitParameter("entityDelegatorName");
+
+                if (delegatorName == null || delegatorName.length() <= 0) {
+                    delegatorName = "default";
+                }
+                if (Debug.verboseOn()) Debug.logVerbose("Setup Entity Engine Delegator with name " + delegatorName, module);
+                Delegator delegator = DelegatorFactory.getDelegator(delegatorName);
+                config.getServletContext().setAttribute("delegator", delegator);
+                if (delegator == null) {
+                    Debug.logError("[ContextFilter.init] ERROR: delegator factory returned null for delegatorName \"" + delegatorName + "\"", module);
+                }
+                
                 // if tenant was specified, replace delegator with the new per-tenant delegator and set tenantId to session attribute
-                Delegator delegator = getDelegator(config.getServletContext());
-                List<GenericValue> tenants = delegator.findList("Tenant", EntityCondition.makeCondition("domainName", serverName), null, UtilMisc.toList("-createdStamp"), null, false);
-                if (UtilValidate.isNotEmpty(tenants)) {
-                    GenericValue tenant = EntityUtil.getFirst(tenants);
-                    String tenantId = tenant.getString("tenantId");
+                List<GenericValue> tenantDomainNames = delegator.findList("TenantDomainName", EntityCondition.makeCondition("domainName", serverName), null, UtilMisc.toList("-createdStamp"), null, false);
+                if (UtilValidate.isNotEmpty(tenantDomainNames)) {
+                    GenericValue tenantDomainName = EntityUtil.getFirst(tenantDomainNames);
+                    String tenantId = tenantDomainName.getString("tenantId");
 
                     // if the request path is a root mount then redirect to the initial path
                     if (UtilValidate.isNotEmpty(requestPath) && requestPath.equals(contextUri)) {
-                        String initialPath = tenant.getString("initialPath");
+                        String initialPath = tenantDomainName.getString("initialPath");
                         if (UtilValidate.isNotEmpty(initialPath) && !"/".equals(initialPath)) {
                             ((HttpServletResponse)response).sendRedirect(initialPath);
                             return;
@@ -297,32 +309,33 @@
                     }
 
                     // make that tenant active, setup a new delegator and a new dispatcher
-                    String tenantDelegatorName = delegator.getDelegatorBaseName() + "#" + tenantId;
-                    httpRequest.getSession().setAttribute("delegatorName", tenantDelegatorName);
+                    delegatorName = delegator.getDelegatorBaseName() + "#" + tenantId;
+                    httpRequest.getSession().setAttribute("delegatorName", delegatorName);
 
                     // after this line the delegator is replaced with the new per-tenant delegator
-                    delegator = DelegatorFactory.getDelegator(tenantDelegatorName);
-                    config.getServletContext().setAttribute("delegator", delegator);
-
-                    // clear web context objects
-                    config.getServletContext().setAttribute("authorization", null);
-                    config.getServletContext().setAttribute("security", null);
-                    config.getServletContext().setAttribute("dispatcher", null);
-
-                    // initialize authorizer
-                    getAuthz();
-                    // initialize security
-                    Security security = getSecurity();
-                    // initialize the services dispatcher
-                    LocalDispatcher dispatcher = getDispatcher(config.getServletContext());
-
-                    // set web context objects
-                    httpRequest.getSession().setAttribute("dispatcher", dispatcher);
-                    httpRequest.getSession().setAttribute("security", security);
+                    delegator = DelegatorFactory.getDelegator(delegatorName);
                     
                     httpRequest.setAttribute("tenantId", tenantId);
                 }
 
+                config.getServletContext().setAttribute("delegator", delegator);
+
+                // clear web context objects
+                config.getServletContext().setAttribute("authorization", null);
+                config.getServletContext().setAttribute("security", null);
+                config.getServletContext().setAttribute("dispatcher", null);
+
+                // initialize authorizer
+                getAuthz();
+                // initialize security
+                Security security = getSecurity();
+                // initialize the services dispatcher
+                LocalDispatcher dispatcher = getDispatcher(config.getServletContext());
+
+                // set web context objects
+                httpRequest.getSession().setAttribute("dispatcher", dispatcher);
+                httpRequest.getSession().setAttribute("security", security);
+
                 // NOTE DEJ20101130: do NOT always put the delegator name in the user's session because the user may 
                 // have logged in and specified a tenant, and even if no Tenant record with a matching domainName field 
                 // is found this will change the user's delegator back to the base one instead of the one for the 
