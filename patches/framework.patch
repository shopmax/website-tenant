Index: framework/common/src/org/ofbiz/common/UrlServletHelper.java
===================================================================
--- framework/common/src/org/ofbiz/common/UrlServletHelper.java	(revision 1296988)
+++ framework/common/src/org/ofbiz/common/UrlServletHelper.java	(working copy)
@@ -55,20 +55,31 @@
             // get tenant delegator by domain name
             String serverName = request.getServerName();
             try {
+                // first set the delegator to default
+                String delegatorName = servletContext.getInitParameter("entityDelegatorName");
+
+                if (delegatorName == null || delegatorName.length() <= 0) {
+                    delegatorName = "default";
+                }
+                if (Debug.verboseOn()) Debug.logVerbose("Setup Entity Engine Delegator with name " + delegatorName, module);
+                delegator = DelegatorFactory.getDelegator(delegatorName);
+                servletContext.setAttribute("delegator", delegator);
+                if (delegator == null) {
+                    Debug.logError("[ContextFilter.init] ERROR: delegator factory returned null for delegatorName \"" + delegatorName + "\"", module);
+                }
+                
                 // if tenant was specified, replace delegator with the new per-tenant delegator and set tenantId to session attribute
-                delegator = getDelegator(servletContext);
-                List<GenericValue> tenants = delegator.findList("Tenant", EntityCondition.makeCondition("domainName", serverName), null, UtilMisc.toList("-createdStamp"), null, false);
-                if (UtilValidate.isNotEmpty(tenants)) {
-                    GenericValue tenant = EntityUtil.getFirst(tenants);
-                    String tenantId = tenant.getString("tenantId");
+                List<GenericValue> tenantDomainNames = delegator.findList("TenantDomainName", EntityCondition.makeCondition("domainName", serverName), null, UtilMisc.toList("-createdStamp"), null, false);
+                if (UtilValidate.isNotEmpty(tenantDomainNames)) {
+                    GenericValue tenantDomainName = EntityUtil.getFirst(tenantDomainNames);
+                    String tenantId = tenantDomainName.getString("tenantId");
                     
                     // make that tenant active, setup a new delegator and a new dispatcher
-                    String tenantDelegatorName = delegator.getDelegatorBaseName() + "#" + tenantId;
-                    httpRequest.getSession().setAttribute("delegatorName", tenantDelegatorName);
+                    delegatorName = delegator.getDelegatorBaseName() + "#" + tenantId;
+                    httpRequest.getSession().setAttribute("delegatorName", delegatorName);
                 
                     // after this line the delegator is replaced with the new per-tenant delegator
-                    delegator = DelegatorFactory.getDelegator(tenantDelegatorName);
-                    servletContext.setAttribute("delegator", delegator);
+                    delegator = DelegatorFactory.getDelegator(delegatorName);
                 }
                 
             } catch (GenericEntityException e) {
@@ -79,6 +90,7 @@
         // set the web context in the request for future use
         request.setAttribute("servletContext", httpRequest.getSession().getServletContext());
         request.setAttribute("delegator", delegator);
+        servletContext.setAttribute("delegator", delegator);
 
         // set the webSiteId in the session
         if (UtilValidate.isEmpty(httpRequest.getSession().getAttribute("webSiteId"))){
Index: framework/entityext/src/org/ofbiz/entityext/data/EntityDataLoadContainer.java
===================================================================
--- framework/entityext/src/org/ofbiz/entityext/data/EntityDataLoadContainer.java	(revision 1296988)
+++ framework/entityext/src/org/ofbiz/entityext/data/EntityDataLoadContainer.java	(working copy)
@@ -306,6 +306,26 @@
                 Debug.logError(e.getMessage(), module);
             }
         }
+        
+        // refresh all components with multi tenant
+        if ("Y".equals(UtilProperties.getPropertyValue("general", "multitenant"))) {
+            allComponents.clear();
+            allComponents = FastList.newInstance();
+            allComponents.addAll(ComponentConfig.getFrameworkComponents());
+            allComponents.addAll(ComponentConfig.getApplicationsComponents());
+            allComponents.addAll(ComponentConfig.getSpecialpurposeComponents());
+            allComponents.addAll(ComponentConfig.getThemesComponents());
+            try {
+                List<GenericValue> tenantComponents = delegator.findByAnd("TenantComponent", UtilMisc.toMap("tenantId", delegator.getDelegatorTenantId()), UtilMisc.toList("sequenceNum"));
+                for (GenericValue tenantComponent : tenantComponents) {
+                    String componentName = tenantComponent.getString("componentName");
+                    allComponents.add(ComponentConfig.getHotDeployComponent(componentName));
+                }
+            } catch (GenericEntityException e) {
+                Debug.logError(e, module);
+            }
+        }
+        
         // load specify components
         List<String> loadComponents = FastList.newInstance();
         if (UtilValidate.isNotEmpty(delegator.getDelegatorTenantId()) && "Y".equals(UtilProperties.getPropertyValue("general.properties", "multitenant"))) {
@@ -564,6 +584,8 @@
                 }
             }
         }
+
+        dbUtil.close();
     }
     /**
      * @see org.ofbiz.base.container.Container#stop()
Index: framework/entityext/src/org/ofbiz/entityext/data/EntityDataServices.java
===================================================================
--- framework/entityext/src/org/ofbiz/entityext/data/EntityDataServices.java	(revision 1296988)
+++ framework/entityext/src/org/ofbiz/entityext/data/EntityDataServices.java	(working copy)
@@ -407,6 +407,8 @@
         // step 8 - checkdb
         Debug.logImportant("Running DB check with add missing enabled", module);
         dbUtil.checkDb(modelEntities, messages, true);
+        
+        dbUtil.close();
 
         Map<String, Object> result = ServiceUtil.returnSuccess();
         result.put("messages", messages);
Index: framework/service/src/org/ofbiz/service/DispatchContext.java
===================================================================
--- framework/service/src/org/ofbiz/service/DispatchContext.java	(revision 1296988)
+++ framework/service/src/org/ofbiz/service/DispatchContext.java	(working copy)
@@ -35,14 +35,21 @@
 import javolution.util.FastMap;
 
 import org.ofbiz.base.component.ComponentConfig;
+import org.ofbiz.base.component.ComponentConfig.ServiceResourceInfo;
 import org.ofbiz.base.concurrent.ExecutionPool;
 import org.ofbiz.base.config.GenericConfigException;
 import org.ofbiz.base.config.MainResourceHandler;
 import org.ofbiz.base.config.ResourceHandler;
 import org.ofbiz.base.util.Debug;
+import org.ofbiz.base.util.UtilMisc;
+import org.ofbiz.base.util.UtilProperties;
+import org.ofbiz.base.util.UtilValidate;
 import org.ofbiz.base.util.UtilXml;
 import org.ofbiz.base.util.cache.UtilCache;
 import org.ofbiz.entity.Delegator;
+import org.ofbiz.entity.GenericEntityException;
+import org.ofbiz.entity.GenericValue;
+import org.ofbiz.entity.util.EntityUtil;
 import org.ofbiz.security.Security;
 import org.ofbiz.security.authz.Authorization;
 import org.ofbiz.service.config.ServiceConfigUtil;
@@ -81,8 +88,12 @@
     }
 
     public void loadReaders() {
-        this.getLocalServiceMap();
-        this.getGlobalServiceMap();
+        try {
+            this.getLocalServiceMap();
+            this.getGlobalServiceMap(getTenantComponentNames());
+        } catch (GenericServiceException e) {
+            Debug.logError(e, module);
+        }
     }
 
     /**
@@ -215,7 +226,7 @@
     }
 
     private ModelService getGlobalModelService(String serviceName) throws GenericServiceException {
-        Map<String, ModelService> serviceMap = this.getGlobalServiceMap();
+        Map<String, ModelService> serviceMap = this.getGlobalServiceMap(getTenantComponentNames());
 
         ModelService retVal = null;
         if (serviceMap != null) {
@@ -303,7 +314,7 @@
         };
     }
 
-    private Map<String, ModelService> getGlobalServiceMap() {
+    private Map<String, ModelService> getGlobalServiceMap(List<String> componentNames) {
         Map<String, ModelService> serviceMap = modelServiceMapByDispatcher.get(GLOBAL_KEY);
         if (serviceMap == null) {
             synchronized (this) {
@@ -327,9 +338,37 @@
 
                         futures.add(ExecutionPool.GLOBAL_EXECUTOR.submit(createServiceReaderCallable(handler)));
                     }
+                    
+                    Collection<ComponentConfig> components = FastList.newInstance();
 
                     // get all of the component resource model stuff, ie specified in each ofbiz-component.xml file
-                    for (ComponentConfig.ServiceResourceInfo componentResourceInfo: ComponentConfig.getAllServiceResourceInfos("model")) {
+                    if (UtilValidate.isEmpty(componentNames)) {
+                        components.addAll(ComponentConfig.getFrameworkComponents());
+                        components.addAll(ComponentConfig.getApplicationsComponents());
+                        components.addAll(ComponentConfig.getSpecialpurposeComponents());
+                        components.addAll(ComponentConfig.getThemesComponents());
+                        if (!"Y".equals(UtilProperties.getPropertyValue("general", "multitenant"))) {
+                            components.addAll(ComponentConfig.getHotDeployComponents());
+                        }
+                    } else {
+                        components.addAll(ComponentConfig.getFrameworkComponents());
+                        components.addAll(ComponentConfig.getApplicationsComponents());
+                        components.addAll(ComponentConfig.getSpecialpurposeComponents());
+                        components.addAll(ComponentConfig.getThemesComponents());
+                        for (String componentName : componentNames) {
+                            components.add(ComponentConfig.getHotDeployComponent(componentName));
+                        }
+                    }
+                    
+                    // get service resource infos
+                    List<ServiceResourceInfo> serviceResourceInfos = FastList.newInstance();
+                    for (ComponentConfig component : components) {
+                        List<ServiceResourceInfo> componentServiceResourceInfos = ComponentConfig.getAllServiceResourceInfos("model", component.getComponentName());
+                        serviceResourceInfos.addAll(componentServiceResourceInfos);
+                    }
+                    
+                    // create resource handler
+                    for (ComponentConfig.ServiceResourceInfo componentResourceInfo: serviceResourceInfos) {
                         futures.add(ExecutionPool.GLOBAL_EXECUTOR.submit(createServiceReaderCallable(componentResourceInfo.createResourceHandler())));
                     }
                     for (Map<String, ModelService> servicesMap: ExecutionPool.getAllFutures(futures)) {
@@ -367,4 +406,20 @@
         ModelService model = this.getModelService(serviceName);
         return model.toWSDL(locationURI);
     }
+    
+    private List<String> getTenantComponentNames() throws GenericServiceException {
+        List<String> componentNames = null;
+        Delegator delegator = getDelegator();
+        String tenantId = delegator.getDelegatorTenantId();
+        if (UtilValidate.isNotEmpty(tenantId)) {
+            // get tenant components
+            try {
+                List<GenericValue> tenantComponents = delegator.findByAnd("TenantComponent", UtilMisc.toMap("tenantId", tenantId), UtilMisc.toList("sequenceNum"));
+                componentNames = EntityUtil.getFieldListFromEntityList(tenantComponents, "componentName", true);
+            } catch (GenericEntityException e) {
+                throw new GenericServiceException(e);
+            }
+        }
+        return componentNames;
+    }
 }
Index: framework/base/src/org/ofbiz/base/component/ComponentConfig.java
===================================================================
--- framework/base/src/org/ofbiz/base/component/ComponentConfig.java	(revision 1296988)
+++ framework/base/src/org/ofbiz/base/component/ComponentConfig.java	(working copy)
@@ -54,6 +54,11 @@
 
     // this is not a UtilCache because reloading may cause problems
     protected static Map<String, ComponentConfig> componentConfigs = FastMap.newInstance();
+    protected static Map<String, ComponentConfig> frameworkComponentConfigs = FastMap.newInstance();
+    protected static Map<String, ComponentConfig> applicationsComponentConfigs = FastMap.newInstance();
+    protected static Map<String, ComponentConfig> specialpurposeComponentConfigs = FastMap.newInstance();
+    protected static Map<String, ComponentConfig> themesComponentConfigs = FastMap.newInstance();
+    protected static Map<String, ComponentConfig> hotDeployComponentConfigs = FastMap.newInstance();
     protected static Map<String, List<WebappInfo>> serverWebApps = FastMap.newInstance();
 
     public static ComponentConfig getComponentConfig(String globalName) throws ComponentException {
@@ -62,6 +67,7 @@
     }
 
     public static ComponentConfig getComponentConfig(String globalName, String rootLocation) throws ComponentException {
+        String ofbizHome = System.getProperty("ofbiz.home");
         ComponentConfig componentConfig = null;
         if (UtilValidate.isNotEmpty(globalName)) {
             componentConfig = componentConfigs.get(globalName);
@@ -78,6 +84,18 @@
                             Debug.logWarning("WARNING: Loading ofbiz-component using a global name that already exists, will over-write: " + componentConfig.getGlobalName(), module);
                         }
                         if (componentConfig.enabled()) {
+                            String componentLocation = rootLocation.substring(rootLocation.indexOf(ofbizHome) + ofbizHome.length() + 1, rootLocation.length());
+                            if (componentLocation.startsWith("framework")) {
+                                frameworkComponentConfigs.put(componentConfig.getComponentName(),componentConfig);
+                            } else if (componentLocation.startsWith("applications")) {
+                                applicationsComponentConfigs.put(componentConfig.getComponentName(), componentConfig);
+                            } else if (componentLocation.startsWith("specialpurpose")) {
+                                specialpurposeComponentConfigs.put(componentConfig.getComponentName(), componentConfig);
+                            } else if (componentLocation.startsWith("themes")) {
+                                themesComponentConfigs.put(componentConfig.getComponentName(), componentConfig);
+                            } else if (componentLocation.startsWith("hot-deploy")) {
+                                hotDeployComponentConfigs.put(componentConfig.getComponentName(), componentConfig);
+                            }
                             componentConfigs.put(componentConfig.getGlobalName(), componentConfig);
                         }
                     }
@@ -107,7 +125,67 @@
             return FastList.newInstance();
         }
     }
+    
+    public static Collection<ComponentConfig> getFrameworkComponents() {
+        Collection<ComponentConfig> values = frameworkComponentConfigs.values();
+        if (values != null) {
+            return values;
+        } else {
+            Debug.logWarning("No framework components were found, something is probably missing or incorrect in the component-load setup.", module);
+            return FastList.newInstance();
+        }
+    }
 
+    public static Collection<ComponentConfig> getApplicationsComponents() {
+        Collection<ComponentConfig> values = applicationsComponentConfigs.values();
+        if (values != null) {
+            return values;
+        } else {
+            Debug.logWarning("No applications components were found, something is probably missing or incorrect in the component-load setup.", module);
+            return FastList.newInstance();
+        }
+    }
+
+    public static Collection<ComponentConfig> getSpecialpurposeComponents() {
+        Collection<ComponentConfig> values = specialpurposeComponentConfigs.values();
+        if (values != null) {
+            return values;
+        } else {
+            Debug.logWarning("No specialpurpose components were found, something is probably missing or incorrect in the component-load setup.", module);
+            return FastList.newInstance();
+        }
+    }
+
+    public static Collection<ComponentConfig> getThemesComponents() {
+        Collection<ComponentConfig> values = themesComponentConfigs.values();
+        if (values != null) {
+            return values;
+        } else {
+            Debug.logWarning("No themes components were found, something is probably missing or incorrect in the component-load setup.", module);
+            return FastList.newInstance();
+        }
+    }
+
+    public static Collection<ComponentConfig> getHotDeployComponents() {
+        Collection<ComponentConfig> values = hotDeployComponentConfigs.values();
+        if (values != null) {
+            return values;
+        } else {
+            Debug.logWarning("No hot-deploy components were found, something is probably missing or incorrect in the component-load setup.", module);
+            return FastList.newInstance();
+        }
+    }
+
+    public static ComponentConfig getHotDeployComponent(String componentName) {
+        ComponentConfig value = hotDeployComponentConfigs.get(componentName);
+        if (value != null) {
+            return value;
+        } else {
+            Debug.logWarning("No hot-deploy component[" + componentName + "] were found, something is probably missing or incorrect in the component-load setup.", module);
+            return null;
+        }
+    }
+
     public static List<ClasspathInfo> getAllClasspathInfos() {
         return getAllClasspathInfos(null);
     }
Index: framework/entity/src/org/ofbiz/entity/datasource/GenericDAO.java
===================================================================
--- framework/entity/src/org/ofbiz/entity/datasource/GenericDAO.java	(revision 1296988)
+++ framework/entity/src/org/ofbiz/entity/datasource/GenericDAO.java	(working copy)
@@ -1212,11 +1212,14 @@
     public void checkDb(Map<String, ModelEntity> modelEntities, List<String> messages, boolean addMissing) {
         DatabaseUtil dbUtil = new DatabaseUtil(this.helperInfo, this.executor);
         dbUtil.checkDb(modelEntities, messages, addMissing);
+        dbUtil.close();
     }
 
     /** Creates a list of ModelEntity objects based on meta data from the database */
     public List<ModelEntity> induceModelFromDb(Collection<String> messages) {
         DatabaseUtil dbUtil = new DatabaseUtil(this.helperInfo, this.executor);
-        return dbUtil.induceModelFromDb(messages);
+        List<ModelEntity> modelEntities = dbUtil.induceModelFromDb(messages);
+        dbUtil.close();
+        return modelEntities;
     }
 }
Index: framework/entity/src/org/ofbiz/entity/connection/DBCPConnectionFactory.java
===================================================================
--- framework/entity/src/org/ofbiz/entity/connection/DBCPConnectionFactory.java	(revision 1296988)
+++ framework/entity/src/org/ofbiz/entity/connection/DBCPConnectionFactory.java	(working copy)
@@ -18,6 +18,16 @@
  *******************************************************************************/
 package org.ofbiz.entity.connection;
 
+import java.sql.Connection;
+import java.sql.Driver;
+import java.sql.SQLException;
+import java.util.Map;
+import java.util.Properties;
+
+import javax.transaction.TransactionManager;
+
+import javolution.util.FastMap;
+
 import org.apache.commons.dbcp.ConnectionFactory;
 import org.apache.commons.dbcp.DriverConnectionFactory;
 import org.apache.commons.dbcp.PoolableConnectionFactory;
@@ -32,15 +42,6 @@
 import org.ofbiz.entity.transaction.TransactionFactory;
 import org.w3c.dom.Element;
 
-import javax.transaction.TransactionManager;
-import java.sql.Connection;
-import java.sql.Driver;
-import java.sql.SQLException;
-import java.util.Map;
-import java.util.Properties;
-
-import javolution.util.FastMap;
-
 /**
  * DBCPConnectionFactory
  */
@@ -48,6 +49,8 @@
 
     public static final String module = DBCPConnectionFactory.class.getName();
     protected static Map<String, ManagedDataSource> dsCache = FastMap.newInstance();
+    protected static Map<String, XAConnectionFactory> xacfCache = FastMap.newInstance();
+    protected static Map<String, GenericObjectPool> gopCache = FastMap.newInstance();
 
     public Connection getConnection(GenericHelperInfo helperInfo, Element jdbcElement) throws SQLException, GenericEntityException {
         ManagedDataSource mds = dsCache.get(helperInfo.getHelperFullName());
@@ -171,13 +174,27 @@
 
             // cache the pool
             dsCache.put(helperInfo.getHelperFullName(), mds);
+            xacfCache.put(helperInfo.getHelperFullName(), xacf);
+            gopCache.put(helperInfo.getHelperFullName(), pool);
 
             return TransactionFactory.getCursorConnection(helperInfo, mds.getConnection());
         }
     }
+    
+    public void removeConnection(GenericHelperInfo helperInfo) {
+        dsCache.remove(helperInfo.getHelperFullName());
+    }
 
     public void closeAll() {
         // no methods on the pool to shutdown; so just clearing for GC
         dsCache.clear();
     }
+    
+    public XAConnectionFactory getXAConnectionFactory(GenericHelperInfo helperInfo) {
+        return xacfCache.get(helperInfo.getHelperFullName());
+    }
+    
+    public GenericObjectPool getGenericObjectPool(GenericHelperInfo helperInfo) {
+        return gopCache.get(helperInfo.getHelperFullName());
+    }
 }
Index: framework/entity/src/org/ofbiz/entity/model/ModelGroupReader.java
===================================================================
--- framework/entity/src/org/ofbiz/entity/model/ModelGroupReader.java	(revision 1296988)
+++ framework/entity/src/org/ofbiz/entity/model/ModelGroupReader.java	(working copy)
@@ -19,6 +19,7 @@
 package org.ofbiz.entity.model;
 
 import java.io.Serializable;
+import java.util.Collection;
 import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.List;
@@ -26,13 +27,16 @@
 import java.util.Set;
 import java.util.TreeSet;
 
+import javolution.util.FastList;
 import javolution.util.FastSet;
 
 import org.ofbiz.base.component.ComponentConfig;
+import org.ofbiz.base.component.ComponentConfig.EntityResourceInfo;
 import org.ofbiz.base.config.GenericConfigException;
 import org.ofbiz.base.config.MainResourceHandler;
 import org.ofbiz.base.config.ResourceHandler;
 import org.ofbiz.base.util.Debug;
+import org.ofbiz.base.util.UtilProperties;
 import org.ofbiz.base.util.UtilTimer;
 import org.ofbiz.base.util.UtilValidate;
 import org.ofbiz.base.util.UtilXml;
@@ -62,22 +66,34 @@
     public List<ResourceHandler> entityGroupResourceHandlers = new LinkedList<ResourceHandler>();
 
     public static ModelGroupReader getModelGroupReader(String delegatorName) throws GenericEntityConfException {
-        DelegatorInfo delegatorInfo = EntityConfigUtil.getDelegatorInfo(delegatorName);
+        return getModelGroupReader(delegatorName, null, null);
+    }
+    
+    public static ModelGroupReader getModelGroupReader(String delegatorBaseName, String tenantId, List<String> componentNames) throws GenericEntityConfException {
+        DelegatorInfo delegatorInfo = EntityConfigUtil.getDelegatorInfo(delegatorBaseName);
 
         if (delegatorInfo == null) {
-            throw new GenericEntityConfException("Could not find a delegator with the name " + delegatorName);
+            throw new GenericEntityConfException("Could not find a delegator with the name " + delegatorBaseName);
         }
 
         String tempModelName = delegatorInfo.entityGroupReader;
-        ModelGroupReader reader = readers.get(tempModelName);
+        String delegatorName = delegatorBaseName;
+        if (UtilValidate.isNotEmpty(tenantId)) {
+            delegatorName += "#" + tenantId;
+        }
+        ModelGroupReader reader = readers.get(delegatorName);
 
         if (reader == null) { // don't want to block here
             synchronized (ModelGroupReader.class) {
                 // must check if null again as one of the blocked threads can still enter
-                reader = readers.get(tempModelName);
+                reader = readers.get(delegatorName);
                 if (reader == null) {
-                    reader = new ModelGroupReader(tempModelName);
-                    readers.put(tempModelName, reader);
+                    if (UtilValidate.isEmpty(componentNames)) {
+                        reader = new ModelGroupReader(tempModelName);
+                    } else {
+                        reader = new ModelGroupReader(tempModelName, componentNames);
+                    }
+                    readers.put(delegatorName, reader);
                 }
             }
         }
@@ -85,6 +101,10 @@
     }
 
     public ModelGroupReader(String modelName) throws GenericEntityConfException {
+        this(modelName, null);
+    }
+
+    public ModelGroupReader(String modelName, List<String> componentNames) throws GenericEntityConfException {
         this.modelName = modelName;
         EntityGroupReaderInfo entityGroupReaderInfo = EntityConfigUtil.getEntityGroupReaderInfo(modelName);
 
@@ -95,8 +115,36 @@
             this.entityGroupResourceHandlers.add(new MainResourceHandler(EntityConfigUtil.ENTITY_ENGINE_XML_FILENAME, resourceElement));
         }
 
+        Collection<ComponentConfig> components = FastList.newInstance();
+        
         // get all of the component resource group stuff, ie specified in each ofbiz-component.xml file
-        for (ComponentConfig.EntityResourceInfo componentResourceInfo: ComponentConfig.getAllEntityResourceInfos("group")) {
+        if (UtilValidate.isEmpty(componentNames)) {
+            components.addAll(ComponentConfig.getFrameworkComponents());
+            components.addAll(ComponentConfig.getApplicationsComponents());
+            components.addAll(ComponentConfig.getSpecialpurposeComponents());
+            components.addAll(ComponentConfig.getThemesComponents());
+            if (!"Y".equals(UtilProperties.getPropertyValue("general", "multitenant"))) {
+                components.addAll(ComponentConfig.getHotDeployComponents());
+            }
+        } else {
+            components.addAll(ComponentConfig.getFrameworkComponents());
+            components.addAll(ComponentConfig.getApplicationsComponents());
+            components.addAll(ComponentConfig.getSpecialpurposeComponents());
+            components.addAll(ComponentConfig.getThemesComponents());
+            for (String componentName : componentNames) {
+                components.add(ComponentConfig.getHotDeployComponent(componentName));
+            }
+        }
+
+        // get entity resource infos
+        List<EntityResourceInfo> entityResourceInfos = FastList.newInstance();
+        for (ComponentConfig component : components) {
+            List<EntityResourceInfo> componentEntityResourceInfos = ComponentConfig.getAllEntityResourceInfos("group", component.getComponentName());
+            entityResourceInfos.addAll(componentEntityResourceInfos);
+        }
+
+        // create resource handlers
+        for (ComponentConfig.EntityResourceInfo componentResourceInfo: entityResourceInfos) {
             if (modelName.equals(componentResourceInfo.readerName)) {
                 this.entityGroupResourceHandlers.add(componentResourceInfo.createResourceHandler());
             }
Index: framework/entity/src/org/ofbiz/entity/model/ModelReader.java
===================================================================
--- framework/entity/src/org/ofbiz/entity/model/ModelReader.java	(revision 1296988)
+++ framework/entity/src/org/ofbiz/entity/model/ModelReader.java	(working copy)
@@ -32,10 +32,12 @@
 import javolution.util.FastSet;
 
 import org.ofbiz.base.component.ComponentConfig;
+import org.ofbiz.base.component.ComponentConfig.EntityResourceInfo;
 import org.ofbiz.base.config.GenericConfigException;
 import org.ofbiz.base.config.MainResourceHandler;
 import org.ofbiz.base.config.ResourceHandler;
 import org.ofbiz.base.util.Debug;
+import org.ofbiz.base.util.UtilProperties;
 import org.ofbiz.base.util.UtilTimer;
 import org.ofbiz.base.util.UtilValidate;
 import org.ofbiz.base.util.UtilXml;
@@ -80,24 +82,36 @@
     protected Map<String, ResourceHandler> entityResourceHandlerMap;
 
     public static ModelReader getModelReader(String delegatorName) throws GenericEntityException {
-        DelegatorInfo delegatorInfo = EntityConfigUtil.getDelegatorInfo(delegatorName);
+        return getModelReader(delegatorName, null, null);
+    }
+    
+    public static ModelReader getModelReader(String delegatorBaseName, String tenantId, List<String> componentNames) throws GenericEntityException {
+        DelegatorInfo delegatorInfo = EntityConfigUtil.getDelegatorInfo(delegatorBaseName);
 
         if (delegatorInfo == null) {
-            throw new GenericEntityConfException("Could not find a delegator with the name " + delegatorName);
+            throw new GenericEntityConfException("Could not find a delegator with the name " + delegatorBaseName);
         }
 
         String tempModelName = delegatorInfo.entityModelReader;
-        ModelReader reader = readers.get(tempModelName);
+        String delegatorName = delegatorBaseName;
+        if (UtilValidate.isNotEmpty(tenantId)) {
+            delegatorName += "#" + tenantId;
+        }
+        ModelReader reader = readers.get(delegatorName);
 
         if (reader == null) { // don't want to block here
             synchronized (ModelReader.class) {
                 // must check if null again as one of the blocked threads can still enter
-                reader = readers.get(tempModelName);
+                reader = readers.get(delegatorName);
                 if (reader == null) {
-                    reader = new ModelReader(tempModelName);
+                    if (UtilValidate.isEmpty(componentNames)) {
+                        reader = new ModelReader(tempModelName);
+                    } else {
+                        reader = new ModelReader(tempModelName, componentNames);
+                    }
                     // preload caches...
                     reader.getEntityCache();
-                    readers.put(tempModelName, reader);
+                    readers.put(delegatorName, reader);
                 }
             }
         }
@@ -105,6 +119,10 @@
     }
 
     public ModelReader(String modelName) throws GenericEntityException {
+        this(modelName, null);
+    }
+
+    public ModelReader(String modelName, List<String> componentNames) throws GenericEntityException {
         this.modelName = modelName;
         entityResourceHandlers = FastList.newInstance();
         resourceHandlerEntities = FastMap.newInstance();
@@ -121,9 +139,37 @@
             ResourceHandler handler = new MainResourceHandler(EntityConfigUtil.ENTITY_ENGINE_XML_FILENAME, resourceElement);
             entityResourceHandlers.add(handler);
         }
+        
+        Collection<ComponentConfig> components = FastList.newInstance();
 
         // get all of the component resource model stuff, ie specified in each ofbiz-component.xml file
-        for (ComponentConfig.EntityResourceInfo componentResourceInfo: ComponentConfig.getAllEntityResourceInfos("model")) {
+        if (UtilValidate.isEmpty(componentNames)) {
+            components.addAll(ComponentConfig.getFrameworkComponents());
+            components.addAll(ComponentConfig.getApplicationsComponents());
+            components.addAll(ComponentConfig.getSpecialpurposeComponents());
+            components.addAll(ComponentConfig.getThemesComponents());
+            if (!"Y".equals(UtilProperties.getPropertyValue("general", "multitenant"))) {
+                components.addAll(ComponentConfig.getHotDeployComponents());
+            }
+        } else {
+            components.addAll(ComponentConfig.getFrameworkComponents());
+            components.addAll(ComponentConfig.getApplicationsComponents());
+            components.addAll(ComponentConfig.getSpecialpurposeComponents());
+            components.addAll(ComponentConfig.getThemesComponents());
+            for (String componentName : componentNames) {
+                components.add(ComponentConfig.getHotDeployComponent(componentName));
+            }
+        }
+
+        // get entity resource infos
+        List<EntityResourceInfo> entityResourceInfos = FastList.newInstance();
+        for (ComponentConfig component : components) {
+            List<EntityResourceInfo> componentEntityResourceInfos = ComponentConfig.getAllEntityResourceInfos("model", component.getComponentName());
+            entityResourceInfos.addAll(componentEntityResourceInfos);
+        }
+
+        // create resource handlers
+        for (ComponentConfig.EntityResourceInfo componentResourceInfo: entityResourceInfos) {
             if (modelName.equals(componentResourceInfo.readerName)) {
                 entityResourceHandlers.add(componentResourceInfo.createResourceHandler());
             }
Index: framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java
===================================================================
--- framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java	(revision 1296988)
+++ framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java	(working copy)
@@ -83,6 +83,7 @@
 
     boolean isLegacy = false;
     protected ExecutorService executor;
+    protected List<Connection> connections = FastList.newInstance();
 
     // OFBiz DatabaseUtil
     public DatabaseUtil(GenericHelperInfo helperInfo) {
@@ -145,6 +146,9 @@
                 throw new GenericEntityException("No connection avaialble for URL [" + connectionUrl + "]");
             }
         }
+        
+        connections.add(connection);
+        
         if (!TransactionUtil.isTransactionInPlace()) {
             connection.setAutoCommit(true);
         }
@@ -3203,6 +3207,18 @@
             }
         }
     }
+    
+    public void close() {
+        for (Connection connection : connections) {
+            try {
+                if (!connection.isClosed()) {
+                    connection.close();
+                }
+            } catch (SQLException e) {
+                Debug.logWarning("Could not close connection: " + connection, module);
+            }
+        }
+    }
 
     /* ====================================================================== */
     /* ====================================================================== */
Index: framework/entity/src/org/ofbiz/entity/DelegatorFactory.java
===================================================================
--- framework/entity/src/org/ofbiz/entity/DelegatorFactory.java	(revision 1296988)
+++ framework/entity/src/org/ofbiz/entity/DelegatorFactory.java	(working copy)
@@ -56,4 +56,8 @@
             delegatorCache.putIfAbsent(delegatorName, delegator);
         } while (true);
     }
+    
+    public static void removeDelegator(String delegatorName) {
+        delegatorCache.remove(delegatorName);
+    }
 }
Index: framework/entity/src/org/ofbiz/entity/GenericDelegator.java
===================================================================
--- framework/entity/src/org/ofbiz/entity/GenericDelegator.java	(revision 1296988)
+++ framework/entity/src/org/ofbiz/entity/GenericDelegator.java	(working copy)
@@ -75,6 +75,7 @@
 import org.ofbiz.entity.util.EntityCrypto;
 import org.ofbiz.entity.util.EntityFindOptions;
 import org.ofbiz.entity.util.EntityListIterator;
+import org.ofbiz.entity.util.EntityUtil;
 import org.ofbiz.entity.util.SequenceUtil;
 //import org.ofbiz.service.ServiceDispatcher;
 import org.w3c.dom.Document;
@@ -212,6 +213,8 @@
     protected GenericDelegator(String delegatorFullName) throws GenericEntityException {
         //if (Debug.infoOn()) Debug.logInfo("Creating new Delegator with name \"" + delegatorFullName + "\".", module);
         this.setDelegatorNames(delegatorFullName);
+        
+        List<String> componentNames = null;
 
         // before continuing, if there is a tenantId use the base delegator to see if it is valid
         if (UtilValidate.isNotEmpty(this.delegatorTenantId)) {
@@ -222,10 +225,14 @@
             } else if ("Y".equals(tenant.getString("disabled"))) {
                 throw new GenericEntityException("No Tenant record found for delegator [" + this.delegatorFullName + "] with tenantId [" + this.delegatorTenantId + "]");
             }
+            
+            // get tenant components
+            List<GenericValue> tenantComponents = baseDelegator.findByAnd("TenantComponent", UtilMisc.toMap("tenantId", this.delegatorTenantId), UtilMisc.toList("sequenceNum"));
+            componentNames = EntityUtil.getFieldListFromEntityList(tenantComponents, "componentName", true);
         }
 
-        this.modelReader = ModelReader.getModelReader(delegatorBaseName);
-        this.modelGroupReader = ModelGroupReader.getModelGroupReader(delegatorBaseName);
+        this.modelReader = ModelReader.getModelReader(delegatorBaseName, delegatorTenantId, componentNames);
+        this.modelGroupReader = ModelGroupReader.getModelGroupReader(delegatorBaseName, delegatorTenantId, componentNames);
 
         cache = new Cache(delegatorFullName);
 
Index: framework/entity/entitydef/entitygroup.xml
===================================================================
--- framework/entity/entitydef/entitygroup.xml	(revision 1296988)
+++ framework/entity/entitydef/entitygroup.xml	(working copy)
@@ -29,4 +29,5 @@
 <!--     <entity-group group="org.ofbiz.tenant" entity="TenantUserLogin"/> -->
     <entity-group group="org.ofbiz.tenant" entity="Component"/>
     <entity-group group="org.ofbiz.tenant" entity="TenantComponent"/>
+    <entity-group group="org.ofbiz.tenant" entity="TenantDomainName"/>
 </entitygroup>
Index: framework/entity/entitydef/entitymodel.xml
===================================================================
--- framework/entity/entitydef/entitymodel.xml	(revision 1296988)
+++ framework/entity/entitydef/entitymodel.xml	(working copy)
@@ -66,8 +66,6 @@
     <entity entity-name="Tenant" package-name="org.ofbiz.entity.tenant">
         <field name="tenantId" type="id-ne"/>
         <field name="tenantName" type="name"/>
-        <field name="domainName" type="long-varchar"/>
-        <field name="initialPath" type="value"/>
         <field name="disabled" type="indicator"><description>Disabled if 'Y', defaults to 'N' (not disabled).</description></field>
         <prim-key field="tenantId"/>
     </entity>
@@ -141,4 +139,14 @@
             <key-map field-name="componentName"/>
         </relation>
     </entity>
+    <entity entity-name="TenantDomainName" package-name="org.ofbiz.entity.tenant">
+        <field name="tenantId" type="id-ne"/>
+        <field name="domainName" type="long-varchar"/>
+        <field name="initialPath" type="value"/>
+        <prim-key field="tenantId"/>
+        <prim-key field="domainName"/>
+        <relation type="one" fk-name="TNTDMN_TNT" rel-entity-name="Tenant">
+            <key-map field-name="tenantId"/>
+        </relation>
+    </entity>
 </entitymodel>
Index: framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java
===================================================================
--- framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java	(revision 1296988)
+++ framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java	(working copy)
@@ -62,6 +62,7 @@
 import org.ofbiz.entity.serialize.XmlSerializer;
 import org.ofbiz.entity.transaction.GenericTransactionException;
 import org.ofbiz.entity.transaction.TransactionUtil;
+import org.ofbiz.entity.util.EntityUtil;
 import org.ofbiz.security.Security;
 import org.ofbiz.security.SecurityConfigurationException;
 import org.ofbiz.security.SecurityFactory;
@@ -294,6 +295,7 @@
     public static String login(HttpServletRequest request, HttpServletResponse response) {
         HttpSession session = request.getSession();
 
+        String sessionId = session.getId();
         String username = request.getParameter("USERNAME");
         String password = request.getParameter("PASSWORD");
 
@@ -405,6 +407,26 @@
 
         if (ModelService.RESPOND_SUCCESS.equals(result.get(ModelService.RESPONSE_MESSAGE))) {
             GenericValue userLogin = (GenericValue) result.get("userLogin");
+          //check user login from instance browser
+            if (userLogin != null) {
+                try {
+                    List<GenericValue> visitList = delegator.findByAnd("Visit", UtilMisc.toMap("userLoginId", userLogin.getString("userLoginId")
+                            ,"thruDate",null), UtilMisc.toList("-fromDate"));
+                    if (UtilValidate.isNotEmpty(visitList)) {
+                        GenericValue visitMap = EntityUtil.getFirst(visitList);
+                        GenericValue chechLoggedOutMap = delegator.findByPrimaryKey("UserLogin", UtilMisc.toMap("userLoginId", username));
+                        String hasLoggedOut = chechLoggedOutMap.getString("hasLoggedOut");
+                        if (hasLoggedOut != null && "N".equals(hasLoggedOut) && !sessionId.equals(visitMap.getString("sessionId"))) {
+                            request.setAttribute("_ERROR_MESSAGE_", "User has Log on into the application Now.");
+                            return "error";
+                        }
+                    }
+                } catch (Exception e) {
+                    Debug.logInfo("error :" + e.getMessage(), module);
+                    request.setAttribute("_ERROR_MESSAGE_", e.getMessage());
+                    return "error";
+                }
+            }
 
             if ("Y".equals(request.getParameter("requirePasswordChange"))) {
                 Map<String, Object> inMap = UtilMisc.<String, Object>toMap("login.username", username, "login.password", password, "locale", UtilHttp.getLocale(request));
@@ -645,9 +667,11 @@
         if (currCatalog != null) session.setAttribute("CURRENT_CATALOG_ID", currCatalog);
         if (delegatorName != null) {
             // if there is a tenantId in the delegatorName remove it now so that tenant selection doesn't last beyond logout
+            /*
             if (delegatorName.indexOf('#') > 0) {
                 delegatorName = delegatorName.substring(0, delegatorName.indexOf('#'));
             }
+            */
             session.setAttribute("delegatorName", delegatorName);
 
             delegator = DelegatorFactory.getDelegator(delegatorName);
Index: framework/webapp/src/org/ofbiz/webapp/control/ContextFilter.java
===================================================================
--- framework/webapp/src/org/ofbiz/webapp/control/ContextFilter.java	(revision 1296988)
+++ framework/webapp/src/org/ofbiz/webapp/control/ContextFilter.java	(working copy)
@@ -280,16 +280,28 @@
             // get tenant delegator by domain name
             String serverName = httpRequest.getServerName();
             try {
+                // first set the delegator to default
+                String delegatorName = config.getServletContext().getInitParameter("entityDelegatorName");
+
+                if (delegatorName == null || delegatorName.length() <= 0) {
+                    delegatorName = "default";
+                }
+                if (Debug.verboseOn()) Debug.logVerbose("Setup Entity Engine Delegator with name " + delegatorName, module);
+                Delegator delegator = DelegatorFactory.getDelegator(delegatorName);
+                config.getServletContext().setAttribute("delegator", delegator);
+                if (delegator == null) {
+                    Debug.logError("[ContextFilter.init] ERROR: delegator factory returned null for delegatorName \"" + delegatorName + "\"", module);
+                }
+                
                 // if tenant was specified, replace delegator with the new per-tenant delegator and set tenantId to session attribute
-                Delegator delegator = getDelegator(config.getServletContext());
-                List<GenericValue> tenants = delegator.findList("Tenant", EntityCondition.makeCondition("domainName", serverName), null, UtilMisc.toList("-createdStamp"), null, false);
-                if (UtilValidate.isNotEmpty(tenants)) {
-                    GenericValue tenant = EntityUtil.getFirst(tenants);
-                    String tenantId = tenant.getString("tenantId");
+                List<GenericValue> tenantDomainNames = delegator.findList("TenantDomainName", EntityCondition.makeCondition("domainName", serverName), null, UtilMisc.toList("-createdStamp"), null, false);
+                if (UtilValidate.isNotEmpty(tenantDomainNames)) {
+                    GenericValue tenantDomainName = EntityUtil.getFirst(tenantDomainNames);
+                    String tenantId = tenantDomainName.getString("tenantId");
 
                     // if the request path is a root mount then redirect to the initial path
                     if (UtilValidate.isNotEmpty(requestPath) && requestPath.equals(contextUri)) {
-                        String initialPath = tenant.getString("initialPath");
+                        String initialPath = tenantDomainName.getString("initialPath");
                         if (UtilValidate.isNotEmpty(initialPath) && !"/".equals(initialPath)) {
                             ((HttpServletResponse)response).sendRedirect(initialPath);
                             return;
@@ -297,32 +309,33 @@
                     }
 
                     // make that tenant active, setup a new delegator and a new dispatcher
-                    String tenantDelegatorName = delegator.getDelegatorBaseName() + "#" + tenantId;
-                    httpRequest.getSession().setAttribute("delegatorName", tenantDelegatorName);
+                    delegatorName = delegator.getDelegatorBaseName() + "#" + tenantId;
+                    httpRequest.getSession().setAttribute("delegatorName", delegatorName);
 
                     // after this line the delegator is replaced with the new per-tenant delegator
-                    delegator = DelegatorFactory.getDelegator(tenantDelegatorName);
-                    config.getServletContext().setAttribute("delegator", delegator);
-
-                    // clear web context objects
-                    config.getServletContext().setAttribute("authorization", null);
-                    config.getServletContext().setAttribute("security", null);
-                    config.getServletContext().setAttribute("dispatcher", null);
-
-                    // initialize authorizer
-                    getAuthz();
-                    // initialize security
-                    Security security = getSecurity();
-                    // initialize the services dispatcher
-                    LocalDispatcher dispatcher = getDispatcher(config.getServletContext());
-
-                    // set web context objects
-                    httpRequest.getSession().setAttribute("dispatcher", dispatcher);
-                    httpRequest.getSession().setAttribute("security", security);
+                    delegator = DelegatorFactory.getDelegator(delegatorName);
                     
                     httpRequest.setAttribute("tenantId", tenantId);
                 }
 
+                config.getServletContext().setAttribute("delegator", delegator);
+
+                // clear web context objects
+                config.getServletContext().setAttribute("authorization", null);
+                config.getServletContext().setAttribute("security", null);
+                config.getServletContext().setAttribute("dispatcher", null);
+
+                // initialize authorizer
+                getAuthz();
+                // initialize security
+                Security security = getSecurity();
+                // initialize the services dispatcher
+                LocalDispatcher dispatcher = getDispatcher(config.getServletContext());
+
+                // set web context objects
+                httpRequest.getSession().setAttribute("dispatcher", dispatcher);
+                httpRequest.getSession().setAttribute("security", security);
+
                 // NOTE DEJ20101130: do NOT always put the delegator name in the user's session because the user may 
                 // have logged in and specified a tenant, and even if no Tenant record with a matching domainName field 
                 // is found this will change the user's delegator back to the base one instead of the one for the 
