Index: framework/base/src/org/ofbiz/base/component/ComponentConfig.java
===================================================================
--- framework/base/src/org/ofbiz/base/component/ComponentConfig.java	(revision 1447126)
+++ framework/base/src/org/ofbiz/base/component/ComponentConfig.java	(working copy)
@@ -37,7 +37,9 @@
 import org.ofbiz.base.container.ContainerException;
 import org.ofbiz.base.location.FlexibleLocation;
 import org.ofbiz.base.util.Debug;
+import org.ofbiz.base.util.FileUtil;
 import org.ofbiz.base.util.KeyStoreUtil;
+import org.ofbiz.base.util.UtilProperties;
 import org.ofbiz.base.util.UtilURL;
 import org.ofbiz.base.util.UtilValidate;
 import org.ofbiz.base.util.UtilXml;
@@ -56,7 +58,15 @@
 
     // this is not a UtilCache because reloading may cause problems
     protected static Map<String, ComponentConfig> componentConfigs = FastMap.newInstance();
+    protected static Map<String, ComponentConfig> frameworkComponentConfigs = FastMap.newInstance();
+    protected static Map<String, ComponentConfig> applicationsComponentConfigs = FastMap.newInstance();
+    protected static Map<String, ComponentConfig> specialpurposeComponentConfigs = FastMap.newInstance();
+    protected static Map<String, ComponentConfig> themesComponentConfigs = FastMap.newInstance();
+    protected static Map<String, ComponentConfig> hotDeployComponentConfigs = FastMap.newInstance();
+    protected static Map<String, ComponentConfig> defaultHotDeployComponentConfigs = FastMap.newInstance();
     protected static Map<String, List<WebappInfo>> serverWebApps = FastMap.newInstance();
+    
+    protected static List<String> defaultTenantComponentNames = null;
 
     public static ComponentConfig getComponentConfig(String globalName) throws ComponentException {
         // TODO: we need to look up the rootLocation from the container config, or this will blow up
@@ -64,6 +74,7 @@
     }
 
     public static ComponentConfig getComponentConfig(String globalName, String rootLocation) throws ComponentException {
+        String ofbizHome = System.getProperty("ofbiz.home");
         ComponentConfig componentConfig = null;
         if (UtilValidate.isNotEmpty(globalName)) {
             componentConfig = componentConfigs.get(globalName);
@@ -80,6 +91,24 @@
                             Debug.logWarning("WARNING: Loading ofbiz-component using a global name that already exists, will over-write: " + componentConfig.getGlobalName(), module);
                         }
                         if (componentConfig.enabled()) {
+                            String componentLocation = rootLocation.substring(rootLocation.indexOf(ofbizHome) + ofbizHome.length() + 1, rootLocation.length());
+                            if (componentLocation.startsWith("framework") || "tenant".equals(componentConfig.getComponentName())) {
+                                frameworkComponentConfigs.put(componentConfig.getComponentName(),componentConfig);
+                            } else if (componentLocation.startsWith("applications")) {
+                                applicationsComponentConfigs.put(componentConfig.getComponentName(), componentConfig);
+                            } else if (componentLocation.startsWith("specialpurpose")) {
+                                specialpurposeComponentConfigs.put(componentConfig.getComponentName(), componentConfig);
+                            } else if (componentLocation.startsWith("themes")) {
+                                themesComponentConfigs.put(componentConfig.getComponentName(), componentConfig);
+                            } else if (componentLocation.startsWith("hot-deploy") && !"tenant".equals(componentConfig.getComponentName())) {
+                                List<String> defaultTenantComponentNames = getDefaultTenantComponentNames();
+                                if (defaultTenantComponentNames.contains(componentConfig.getComponentName())) {
+                                    defaultHotDeployComponentConfigs.put(componentConfig.getComponentName(), componentConfig);
+                                } else {
+                                    hotDeployComponentConfigs.put(componentConfig.getComponentName(), componentConfig);
+                                }
+                            }
+                            
                             componentConfigs.put(componentConfig.getGlobalName(), componentConfig);
                         }
                     }
@@ -109,7 +138,152 @@
             return FastList.newInstance();
         }
     }
+    
+    public static Collection<ComponentConfig> getFrameworkComponents() {
+        Collection<ComponentConfig> values = frameworkComponentConfigs.values();
+        if (values != null) {
+            return values;
+        } else {
+            Debug.logWarning("No framework components were found, something is probably missing or incorrect in the component-load setup.", module);
+            return FastList.newInstance();
+        }
+    }
 
+    public static Collection<ComponentConfig> getApplicationsComponents() {
+        Collection<ComponentConfig> values = applicationsComponentConfigs.values();
+        if (values != null) {
+            return values;
+        } else {
+            Debug.logWarning("No applications components were found, something is probably missing or incorrect in the component-load setup.", module);
+            return FastList.newInstance();
+        }
+    }
+
+    public static Collection<ComponentConfig> getSpecialpurposeComponents() {
+        Collection<ComponentConfig> values = specialpurposeComponentConfigs.values();
+        if (values != null) {
+            return values;
+        } else {
+            Debug.logWarning("No specialpurpose components were found, something is probably missing or incorrect in the component-load setup.", module);
+            return FastList.newInstance();
+        }
+    }
+
+    public static Collection<ComponentConfig> getThemesComponents() {
+        Collection<ComponentConfig> values = themesComponentConfigs.values();
+        if (values != null) {
+            return values;
+        } else {
+            Debug.logWarning("No themes components were found, something is probably missing or incorrect in the component-load setup.", module);
+            return FastList.newInstance();
+        }
+    }
+
+    public static Collection<ComponentConfig> getHotDeployComponents() {
+        Collection<ComponentConfig> values = hotDeployComponentConfigs.values();
+        if (values != null) {
+            return values;
+        } else {
+            Debug.logWarning("No hot-deploy components were found, something is probably missing or incorrect in the component-load setup.", module);
+            return FastList.newInstance();
+        }
+    }
+
+    public static ComponentConfig getHotDeployComponent(String componentName) {
+        ComponentConfig value = hotDeployComponentConfigs.get(componentName);
+        if (value != null) {
+            return value;
+        } else {
+            value = defaultHotDeployComponentConfigs.get(componentName);
+            if (value != null) {
+                return value;
+            } else {
+                Debug.logWarning("No hot-deploy component[" + componentName + "] were found, something is probably missing or incorrect in the component-load setup.", module);
+                return null;
+            }
+        }
+    }
+
+    public static Collection<ComponentConfig> getDefaultHotDeployComponents() {
+        Collection<ComponentConfig> values = defaultHotDeployComponentConfigs.values();
+        if (values != null) {
+            return values;
+        } else {
+            Debug.logWarning("No default hot-deploy components were found, something is probably missing or incorrect in the component-load setup.", module);
+            return FastList.newInstance();
+        }
+    }
+    
+    public static List<String> getDefaultHotDeployComponentNames() {
+        List<String> componentNames = FastList.newInstance();
+        Collection<ComponentConfig> values = defaultHotDeployComponentConfigs.values();
+        if (values != null) {
+            for (ComponentConfig value : values) {
+                componentNames.add(value.getComponentName());
+            }
+        } else {
+            Debug.logWarning("No default hot-deploy components were found, something is probably missing or incorrect in the component-load setup.", module);
+            return FastList.newInstance();
+        }
+        return componentNames;
+    }
+    
+    public static Collection<ComponentConfig> getTenantComponents(List<String> componentNames) {
+        Collection<ComponentConfig> components = FastList.newInstance();
+        if (UtilValidate.isEmpty(componentNames)) {
+            components.addAll(ComponentConfig.getFrameworkComponents());
+            components.addAll(ComponentConfig.getApplicationsComponents());
+            components.addAll(ComponentConfig.getSpecialpurposeComponents());
+            components.addAll(ComponentConfig.getThemesComponents());
+            if (!"Y".equals(UtilProperties.getPropertyValue("general", "multitenant"))) {
+                components.addAll(ComponentConfig.getHotDeployComponents());
+            }
+        } else {
+            components.addAll(ComponentConfig.getFrameworkComponents());
+            components.addAll(ComponentConfig.getApplicationsComponents());
+            components.addAll(ComponentConfig.getSpecialpurposeComponents());
+            components.addAll(ComponentConfig.getThemesComponents());
+            for (String componentName : componentNames) {
+                ComponentConfig component = ComponentConfig.getHotDeployComponent(componentName);
+                if (UtilValidate.isNotEmpty(component)) {
+                    components.add(component);
+                }
+            }
+        }
+        return components;
+    }
+    
+    public static Collection<ComponentConfig> getDefaultTenantComponents() {
+        Collection<ComponentConfig> components = FastList.newInstance();
+        components.addAll(ComponentConfig.getFrameworkComponents());
+        components.addAll(ComponentConfig.getApplicationsComponents());
+        components.addAll(ComponentConfig.getSpecialpurposeComponents());
+        components.addAll(ComponentConfig.getThemesComponents());
+        components.addAll(ComponentConfig.getDefaultHotDeployComponents());
+        return components;
+    }
+    
+    public static List<String> getDefaultTenantComponentNames() {
+        if (UtilValidate.isEmpty(defaultTenantComponentNames)) {
+            defaultTenantComponentNames = FastList.newInstance();
+            try {
+                String ofbizHome = System.getProperty("ofbiz.home");
+                File defaultTenantFile = FileUtil.getFile(new File(ofbizHome), "hot-deploy/tenant/config/default-tenant.xml");
+                if (defaultTenantFile.exists()) {
+                    Document document = UtilXml.readXmlDocument(defaultTenantFile.toURI().toURL());
+                    List<? extends Element> componentElements = UtilXml.childElementList(document.getDocumentElement(), "component");
+                    for (Element componentElement : componentElements) {
+                        String componentName = UtilXml.elementAttribute(componentElement, "name", null);
+                        defaultTenantComponentNames.add(componentName);
+                    }
+                }
+            } catch (Exception e) {
+                Debug.logWarning(e, module);
+            }
+        }
+        return defaultTenantComponentNames;
+    }
+
     public static List<ClasspathInfo> getAllClasspathInfos() {
         return getAllClasspathInfos(null);
     }
@@ -341,6 +515,27 @@
         }
         return info;
     }
+    
+    public static WebappInfo getWebAppInfo(String serverName, String hostName, String contextRoot) {
+        ComponentConfig.WebappInfo info = null;
+        if (serverName == null || contextRoot == null) {
+            return info;
+        }
+    
+        for (ComponentConfig cc: getAllComponents()) {
+            for (WebappInfo wInfo: cc.getWebappInfos()) {
+                if (serverName.equals(wInfo.server) && contextRoot.equals(wInfo.getContextRoot())) {
+                    List<String> virtualHosts = wInfo.getVirtualHosts();
+                    if (UtilValidate.isNotEmpty(virtualHosts) && virtualHosts.contains(hostName)) {
+                        return wInfo;
+                    } else {
+                        info = wInfo;
+                    }
+                }
+            }
+        }
+        return info;
+    }
 
     // ========== component info fields ==========
     protected String globalName = null;
Index: framework/entity/src/org/ofbiz/entity/GenericDelegator.java
===================================================================
--- framework/entity/src/org/ofbiz/entity/GenericDelegator.java	(revision 1447126)
+++ framework/entity/src/org/ofbiz/entity/GenericDelegator.java	(working copy)
@@ -37,6 +37,7 @@
 import javolution.util.FastList;
 import javolution.util.FastMap;
 
+import org.ofbiz.base.component.ComponentConfig;
 import org.ofbiz.base.concurrent.ExecutionPool;
 import org.ofbiz.base.util.Debug;
 import org.ofbiz.base.util.GeneralRuntimeException;
@@ -75,6 +76,7 @@
 import org.ofbiz.entity.util.EntityCrypto;
 import org.ofbiz.entity.util.EntityFindOptions;
 import org.ofbiz.entity.util.EntityListIterator;
+import org.ofbiz.entity.util.EntityUtil;
 import org.ofbiz.entity.util.SequenceUtil;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
@@ -208,6 +210,7 @@
         //if (Debug.infoOn()) Debug.logInfo("Creating new Delegator with name \"" + delegatorFullName + "\".", module);
         this.setDelegatorNames(delegatorFullName);
         this.delegatorInfo = EntityConfigUtil.getDelegatorInfo(delegatorBaseName);
+ 		List<String> componentNames = null;
 
         String kekText;
         // before continuing, if there is a tenantId use the base delegator to see if it is valid
@@ -216,21 +219,27 @@
             GenericValue tenant = baseDelegator.findOne("Tenant", true, "tenantId", this.delegatorTenantId);
             if (tenant == null) {
                 throw new GenericEntityException("No Tenant record found for delegator [" + this.delegatorFullName + "] with tenantId [" + this.delegatorTenantId + "]");
-            } else if ("Y".equals(tenant.getString("disabled"))) {
+            }/* else if ("Y".equals(tenant.getString("disabled"))) {
                 throw new GenericEntityException("No Tenant record found for delegator [" + this.delegatorFullName + "] with tenantId [" + this.delegatorTenantId + "]");
-            }
+            }*/
             GenericValue kekValue = baseDelegator.findOne("TenantKeyEncryptingKey", true, "tenantId", getDelegatorTenantId());
             if (kekValue != null) {
                 kekText = kekValue.getString("kekText");
             } else {
                 kekText = this.delegatorInfo.kekText;
             }
+
+            // get tenant components
+            List<GenericValue> tenantComponents = baseDelegator.findByAnd("TenantComponent", UtilMisc.toMap("tenantId", this.delegatorTenantId), UtilMisc.toList("sequenceNum"), false);
+            componentNames = EntityUtil.getFieldListFromEntityList(tenantComponents, "componentName", true);
+
         } else {
+            componentNames = ComponentConfig.getDefaultHotDeployComponentNames();
             kekText = this.delegatorInfo.kekText;
         }
 
-        this.modelReader = ModelReader.getModelReader(delegatorBaseName);
-        this.modelGroupReader = ModelGroupReader.getModelGroupReader(delegatorBaseName);
+        this.modelReader = ModelReader.getModelReader(delegatorBaseName, delegatorTenantId, componentNames);
+        this.modelGroupReader = ModelGroupReader.getModelGroupReader(delegatorBaseName, delegatorTenantId, componentNames);
 
         cache = new Cache(delegatorFullName);
 
Index: framework/entity/src/org/ofbiz/entity/datasource/GenericDAO.java
===================================================================
--- framework/entity/src/org/ofbiz/entity/datasource/GenericDAO.java	(revision 1447126)
+++ framework/entity/src/org/ofbiz/entity/datasource/GenericDAO.java	(working copy)
@@ -1238,11 +1238,14 @@
     public void checkDb(Map<String, ModelEntity> modelEntities, List<String> messages, boolean addMissing) {
         DatabaseUtil dbUtil = new DatabaseUtil(this.helperInfo, this.executor);
         dbUtil.checkDb(modelEntities, messages, addMissing);
+        dbUtil.close();
     }
 
     /** Creates a list of ModelEntity objects based on meta data from the database */
     public List<ModelEntity> induceModelFromDb(Collection<String> messages) {
         DatabaseUtil dbUtil = new DatabaseUtil(this.helperInfo, this.executor);
-        return dbUtil.induceModelFromDb(messages);
+        List<ModelEntity> modelEntities = dbUtil.induceModelFromDb(messages);
+        dbUtil.close();
+        return modelEntities;
     }
 }
Index: framework/entity/src/org/ofbiz/entity/connection/DBCPConnectionFactory.java
===================================================================
--- framework/entity/src/org/ofbiz/entity/connection/DBCPConnectionFactory.java	(revision 1447126)
+++ framework/entity/src/org/ofbiz/entity/connection/DBCPConnectionFactory.java	(working copy)
@@ -51,6 +51,8 @@
 
     public static final String module = DBCPConnectionFactory.class.getName();
     protected static Map<String, ManagedDataSource> dsCache = FastMap.newInstance();
+    protected static Map<String, XAConnectionFactory> xacfCache = FastMap.newInstance();
+    protected static Map<String, GenericObjectPool> gopCache = FastMap.newInstance();
 
     public Connection getConnection(GenericHelperInfo helperInfo, Element jdbcElement) throws SQLException, GenericEntityException {
         ManagedDataSource mds = dsCache.get(helperInfo.getHelperFullName());
@@ -174,15 +176,29 @@
 
             // cache the pool
             dsCache.put(helperInfo.getHelperFullName(), mds);
+            xacfCache.put(helperInfo.getHelperFullName(), xacf);
+            gopCache.put(helperInfo.getHelperFullName(), pool);
 
             return TransactionFactory.getCursorConnection(helperInfo, mds.getConnection());
         }
     }
+    
+    public void removeConnection(GenericHelperInfo helperInfo) {
+        dsCache.remove(helperInfo.getHelperFullName());
+    }
 
     public void closeAll() {
         // no methods on the pool to shutdown; so just clearing for GC
         dsCache.clear();
     }
+    
+    public XAConnectionFactory getXAConnectionFactory(GenericHelperInfo helperInfo) {
+        return xacfCache.get(helperInfo.getHelperFullName());
+    }
+    
+    public GenericObjectPool getGenericObjectPool(GenericHelperInfo helperInfo) {
+        return gopCache.get(helperInfo.getHelperFullName());
+    }
 
     public static Map getDataSourceInfo(String helperName) {
         Map dataSourceInfo = new HashMap();
Index: framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java
===================================================================
--- framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java	(revision 1447126)
+++ framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java	(working copy)
@@ -83,6 +83,7 @@
 
     boolean isLegacy = false;
     protected ExecutorService executor;
+    protected List<Connection> connections = FastList.newInstance();
 
     // OFBiz DatabaseUtil
     public DatabaseUtil(GenericHelperInfo helperInfo) {
@@ -145,6 +146,9 @@
                 throw new GenericEntityException("No connection avaialble for URL [" + connectionUrl + "]");
             }
         }
+        
+        connections.add(connection);
+        
         if (!TransactionUtil.isTransactionInPlace()) {
             connection.setAutoCommit(true);
         }
@@ -3203,6 +3207,18 @@
             }
         }
     }
+    
+    public void close() {
+        for (Connection connection : connections) {
+            try {
+                if (!connection.isClosed()) {
+                    connection.close();
+                }
+            } catch (SQLException e) {
+                Debug.logWarning("Could not close connection: " + connection, module);
+            }
+        }
+    }
 
     /* ====================================================================== */
     /* ====================================================================== */
Index: framework/entity/src/org/ofbiz/entity/model/ModelReader.java
===================================================================
--- framework/entity/src/org/ofbiz/entity/model/ModelReader.java	(revision 1447126)
+++ framework/entity/src/org/ofbiz/entity/model/ModelReader.java	(working copy)
@@ -32,6 +32,7 @@
 import javolution.util.FastSet;
 
 import org.ofbiz.base.component.ComponentConfig;
+import org.ofbiz.base.component.ComponentConfig.EntityResourceInfo;
 import org.ofbiz.base.config.GenericConfigException;
 import org.ofbiz.base.config.MainResourceHandler;
 import org.ofbiz.base.config.ResourceHandler;
@@ -80,25 +81,41 @@
     protected Map<String, ResourceHandler> entityResourceHandlerMap;
 
     public static ModelReader getModelReader(String delegatorName) throws GenericEntityException {
-        DelegatorInfo delegatorInfo = EntityConfigUtil.getDelegatorInfo(delegatorName);
+        return getModelReader(delegatorName, null, null);
+    }
 
+    public static ModelReader getModelReader(String delegatorBaseName, String tenantId, List<String> componentNames) throws GenericEntityException {
+        DelegatorInfo delegatorInfo = EntityConfigUtil.getDelegatorInfo(delegatorBaseName);
+
         if (delegatorInfo == null) {
-            throw new GenericEntityConfException("Could not find a delegator with the name " + delegatorName);
+            throw new GenericEntityConfException("Could not find a delegator with the name " + delegatorBaseName);
         }
 
         String tempModelName = delegatorInfo.entityModelReader;
-        ModelReader reader = readers.get(tempModelName);
+        String delegatorName = delegatorBaseName;
+        if (UtilValidate.isNotEmpty(tenantId)) {
+            delegatorName += "#" + tenantId;
+        }
+        ModelReader reader = readers.get(delegatorName);
 
         if (reader == null) {
-            reader = new ModelReader(tempModelName);
+            if (UtilValidate.isEmpty(componentNames)) {
+                reader = new ModelReader(tempModelName);
+            } else {
+                reader = new ModelReader(tempModelName, componentNames);
+            }
             // preload caches...
             reader.getEntityCache();
-            reader = readers.putIfAbsentAndGet(tempModelName, reader);
+            reader = readers.putIfAbsentAndGet(delegatorName, reader);
         }
         return reader;
     }
 
     private ModelReader(String modelName) throws GenericEntityException {
+        this(modelName, null);
+    }
+
+    private ModelReader(String modelName, List<String> componentNames) throws GenericEntityException {
         this.modelName = modelName;
         entityResourceHandlers = FastList.newInstance();
         resourceHandlerEntities = FastMap.newInstance();
@@ -115,9 +132,17 @@
             ResourceHandler handler = new MainResourceHandler(EntityConfigUtil.ENTITY_ENGINE_XML_FILENAME, resourceElement);
             entityResourceHandlers.add(handler);
         }
-
-        // get all of the component resource model stuff, ie specified in each ofbiz-component.xml file
-        for (ComponentConfig.EntityResourceInfo componentResourceInfo: ComponentConfig.getAllEntityResourceInfos("model")) {
+        
+        // get entity resource infos
+        List<EntityResourceInfo> entityResourceInfos = FastList.newInstance();
+        Collection<ComponentConfig> components = ComponentConfig.getTenantComponents(componentNames);
+        for (ComponentConfig component : components) {
+            List<EntityResourceInfo> componentEntityResourceInfos = ComponentConfig.getAllEntityResourceInfos("model", component.getComponentName());
+            entityResourceInfos.addAll(componentEntityResourceInfos);
+        }
+        
+        // create resource handlers
+        for (ComponentConfig.EntityResourceInfo componentResourceInfo: entityResourceInfos) {
             if (modelName.equals(componentResourceInfo.readerName)) {
                 entityResourceHandlers.add(componentResourceInfo.createResourceHandler());
             }
Index: framework/entity/src/org/ofbiz/entity/model/ModelGroupReader.java
===================================================================
--- framework/entity/src/org/ofbiz/entity/model/ModelGroupReader.java	(revision 1447126)
+++ framework/entity/src/org/ofbiz/entity/model/ModelGroupReader.java	(working copy)
@@ -19,6 +19,7 @@
 package org.ofbiz.entity.model;
 
 import java.io.Serializable;
+import java.util.Collection;
 import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.List;
@@ -26,9 +27,11 @@
 import java.util.Set;
 import java.util.TreeSet;
 
+import javolution.util.FastList;
 import javolution.util.FastSet;
 
 import org.ofbiz.base.component.ComponentConfig;
+import org.ofbiz.base.component.ComponentConfig.EntityResourceInfo;
 import org.ofbiz.base.config.GenericConfigException;
 import org.ofbiz.base.config.MainResourceHandler;
 import org.ofbiz.base.config.ResourceHandler;
@@ -62,22 +65,39 @@
     public List<ResourceHandler> entityGroupResourceHandlers = new LinkedList<ResourceHandler>();
 
     public static ModelGroupReader getModelGroupReader(String delegatorName) throws GenericEntityConfException {
-        DelegatorInfo delegatorInfo = EntityConfigUtil.getDelegatorInfo(delegatorName);
+        return getModelGroupReader(delegatorName, null, null);
+    }
 
+    public static ModelGroupReader getModelGroupReader(String delegatorBaseName, String tenantId, List<String> componentNames) throws GenericEntityConfException {
+        DelegatorInfo delegatorInfo = EntityConfigUtil.getDelegatorInfo(delegatorBaseName);
+
         if (delegatorInfo == null) {
-            throw new GenericEntityConfException("Could not find a delegator with the name " + delegatorName);
+            throw new GenericEntityConfException("Could not find a delegator with the name " + delegatorBaseName);
         }
 
         String tempModelName = delegatorInfo.entityGroupReader;
-        ModelGroupReader reader = readers.get(tempModelName);
+        String delegatorName = delegatorBaseName;
+        if (UtilValidate.isNotEmpty(tenantId)) {
+            delegatorName += "#" + tenantId;
+        }
+        ModelGroupReader reader = readers.get(delegatorName);
 
         if (reader == null) {
-            reader = readers.putIfAbsentAndGet(tempModelName, new ModelGroupReader(tempModelName));
+            if (UtilValidate.isEmpty(componentNames)) {
+                reader = new ModelGroupReader(tempModelName);
+            } else {
+                reader = new ModelGroupReader(tempModelName, componentNames);
+            }
+            reader = readers.putIfAbsentAndGet(delegatorName, reader);
         }
         return reader;
     }
 
     public ModelGroupReader(String modelName) throws GenericEntityConfException {
+        this(modelName, null);
+    }
+    
+    public ModelGroupReader(String modelName, List<String> componentNames) throws GenericEntityConfException {
         this.modelName = modelName;
         EntityGroupReaderInfo entityGroupReaderInfo = EntityConfigUtil.getEntityGroupReaderInfo(modelName);
 
@@ -88,8 +108,16 @@
             this.entityGroupResourceHandlers.add(new MainResourceHandler(EntityConfigUtil.ENTITY_ENGINE_XML_FILENAME, resourceElement));
         }
 
-        // get all of the component resource group stuff, ie specified in each ofbiz-component.xml file
-        for (ComponentConfig.EntityResourceInfo componentResourceInfo: ComponentConfig.getAllEntityResourceInfos("group")) {
+        // get entity resource infos
+        List<EntityResourceInfo> entityResourceInfos = FastList.newInstance();
+        Collection<ComponentConfig> components = ComponentConfig.getTenantComponents(componentNames);
+        for (ComponentConfig component : components) {
+            List<EntityResourceInfo> componentEntityResourceInfos = ComponentConfig.getAllEntityResourceInfos("group", component.getComponentName());
+            entityResourceInfos.addAll(componentEntityResourceInfos);
+        }
+        
+        // create resource handlers
+        for (ComponentConfig.EntityResourceInfo componentResourceInfo: entityResourceInfos) {
             if (modelName.equals(componentResourceInfo.readerName)) {
                 this.entityGroupResourceHandlers.add(componentResourceInfo.createResourceHandler());
             }
Index: framework/entity/src/org/ofbiz/entity/util/EntitySaxReader.java
===================================================================
--- framework/entity/src/org/ofbiz/entity/util/EntitySaxReader.java	(revision 1447126)
+++ framework/entity/src/org/ofbiz/entity/util/EntitySaxReader.java	(working copy)
@@ -237,7 +237,7 @@
             Debug.logWarning("location URL was null, doing nothing", module);
             return 0;
         }
-        Debug.logImportant("Beginning import from URL: " + location.toExternalForm(), module);
+        Debug.logImportant("Beginning import [" + delegator.getDelegatorName() + "] from URL: " + location.toExternalForm(), module);
         InputStream is = null;
         long numberRead = 0;
         try {
@@ -287,7 +287,7 @@
             boolean beganTransaction = false;
             if (transactionTimeout > -1) {
                 beganTransaction = TransactionUtil.begin(transactionTimeout);
-                Debug.logImportant("Transaction Timeout set to " + transactionTimeout / 3600 + " hours (" + transactionTimeout + " seconds)", module);
+                Debug.logImportant("Transaction Timeout [" + delegator.getDelegatorName() + "] set to " + transactionTimeout / 3600 + " hours (" + transactionTimeout + " seconds)", module);
             }
             try {
                 parser.parse(is);
@@ -310,7 +310,7 @@
         } catch (GenericTransactionException e) {
             throw new SAXException("A transaction error occurred reading data", e);
         }
-        Debug.logImportant("Finished " + numberRead + " values from " + docDescription, module);
+        Debug.logImportant("Finished [" + delegator.getDelegatorName() + "] " + numberRead + " values from " + docDescription, module);
         if (Debug.verboseOn()) { 
             Debug.logVerbose("  Detail created : " + numberCreated + ", skipped : " + numberSkipped +
                     ", updated : " + numberUpdated + ", replaced : " + numberReplaced +
Index: framework/entity/src/org/ofbiz/entity/DelegatorFactory.java
===================================================================
--- framework/entity/src/org/ofbiz/entity/DelegatorFactory.java	(revision 1447126)
+++ framework/entity/src/org/ofbiz/entity/DelegatorFactory.java	(working copy)
@@ -56,4 +56,8 @@
             delegatorCache.putIfAbsent(delegatorName, delegator);
         } while (true);
     }
+    
+    public static void removeDelegator(String delegatorName) {
+        delegatorCache.remove(delegatorName);
+    }
 }
Index: framework/entity/entitydef/entitygroup.xml
===================================================================
--- framework/entity/entitydef/entitygroup.xml	(revision 1447126)
+++ framework/entity/entitydef/entitygroup.xml	(working copy)
@@ -29,4 +29,5 @@
 <!--     <entity-group group="org.ofbiz.tenant" entity="TenantUserLogin"/> -->
     <entity-group group="org.ofbiz.tenant" entity="Component"/>
     <entity-group group="org.ofbiz.tenant" entity="TenantComponent"/>
+    <entity-group group="org.ofbiz.tenant" entity="TenantDomainName"/>
 </entitygroup>
Index: framework/webapp/src/org/ofbiz/webapp/control/ContextFilter.java
===================================================================
--- framework/webapp/src/org/ofbiz/webapp/control/ContextFilter.java	(revision 1447126)
+++ framework/webapp/src/org/ofbiz/webapp/control/ContextFilter.java	(working copy)
@@ -260,16 +260,27 @@
             // get tenant delegator by domain name
             String serverName = httpRequest.getServerName();
             try {
+               // first set the delegator to default
+                String delegatorName = config.getServletContext().getInitParameter("entityDelegatorName");
+
+                if (delegatorName == null || delegatorName.length() <= 0) {
+                    delegatorName = "default";
+                }
+                if (Debug.verboseOn()) Debug.logVerbose("Setup Entity Engine Delegator with name " + delegatorName, module);
+                Delegator delegator = DelegatorFactory.getDelegator(delegatorName);
+                config.getServletContext().setAttribute("delegator", delegator);
+                if (delegator == null) {
+                    Debug.logError("[ContextFilter.init] ERROR: delegator factory returned null for delegatorName \"" + delegatorName + "\"", module);
+                }
                 // if tenant was specified, replace delegator with the new per-tenant delegator and set tenantId to session attribute
-                Delegator delegator = getDelegator(config.getServletContext());
-                List<GenericValue> tenants = delegator.findList("Tenant", EntityCondition.makeCondition("domainName", serverName), null, UtilMisc.toList("-createdStamp"), null, false);
-                if (UtilValidate.isNotEmpty(tenants)) {
-                    GenericValue tenant = EntityUtil.getFirst(tenants);
-                    String tenantId = tenant.getString("tenantId");
+                List<GenericValue> tenantDomainNames = delegator.findList("TenantDomainName", EntityCondition.makeCondition("domainName", serverName), null, UtilMisc.toList("-createdStamp"), null, false);
+                if (UtilValidate.isNotEmpty(tenantDomainNames)) {
+                    GenericValue tenantDomainName = EntityUtil.getFirst(tenantDomainNames);
+                    String tenantId = tenantDomainName.getString("tenantId");
 
                     // if the request path is a root mount then redirect to the initial path
                     if (UtilValidate.isNotEmpty(requestPath) && requestPath.equals(contextUri)) {
-                        String initialPath = tenant.getString("initialPath");
+                        String initialPath = tenantDomainName.getString("initialPath");
                         if (UtilValidate.isNotEmpty(initialPath) && !"/".equals(initialPath)) {
                             ((HttpServletResponse)response).sendRedirect(initialPath);
                             return;
@@ -282,23 +293,25 @@
 
                     // after this line the delegator is replaced with the new per-tenant delegator
                     delegator = DelegatorFactory.getDelegator(tenantDelegatorName);
-                    config.getServletContext().setAttribute("delegator", delegator);
-
-                    // clear web context objects
-                    config.getServletContext().setAttribute("security", null);
-                    config.getServletContext().setAttribute("dispatcher", null);
-
-                    // initialize security
-                    Security security = getSecurity();
-                    // initialize the services dispatcher
-                    LocalDispatcher dispatcher = getDispatcher(config.getServletContext());
-
-                    // set web context objects
-                    request.setAttribute("dispatcher", dispatcher);
-                    request.setAttribute("security", security);
                     
                     request.setAttribute("tenantId", tenantId);
                 }
+                
+                config.getServletContext().setAttribute("delegator", delegator);
+                
+                // clear web context objects
+                config.getServletContext().setAttribute("authorization", null);
+                config.getServletContext().setAttribute("security", null);
+                config.getServletContext().setAttribute("dispatcher", null);
+                
+                // initialize security
+                Security security = getSecurity();
+                // initialize the services dispatcher
+                LocalDispatcher dispatcher = getDispatcher(config.getServletContext());
+                
+                // set web context objects
+                httpRequest.getSession().setAttribute("dispatcher", dispatcher);
+                httpRequest.getSession().setAttribute("security", security);
 
                 // NOTE DEJ20101130: do NOT always put the delegator name in the user's session because the user may 
                 // have logged in and specified a tenant, and even if no Tenant record with a matching domainName field 
Index: framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java
===================================================================
--- framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java	(revision 1447126)
+++ framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java	(working copy)
@@ -60,6 +60,7 @@
 import org.ofbiz.entity.serialize.XmlSerializer;
 import org.ofbiz.entity.transaction.GenericTransactionException;
 import org.ofbiz.entity.transaction.TransactionUtil;
+import org.ofbiz.entity.util.EntityUtil;
 import org.ofbiz.security.Security;
 import org.ofbiz.security.SecurityConfigurationException;
 import org.ofbiz.security.SecurityFactory;
@@ -290,6 +291,7 @@
     public static String login(HttpServletRequest request, HttpServletResponse response) {
         HttpSession session = request.getSession();
 
+        String sessionId = session.getId();
         String username = request.getParameter("USERNAME");
         String password = request.getParameter("PASSWORD");
 
@@ -401,6 +403,28 @@
 
         if (ModelService.RESPOND_SUCCESS.equals(result.get(ModelService.RESPONSE_MESSAGE))) {
             GenericValue userLogin = (GenericValue) result.get("userLogin");
+            //check user login from instance browser
+            /*
+            if (userLogin != null) {
+                try {
+                    List<GenericValue> visitList = delegator.findByAnd("Visit", UtilMisc.toMap("userLoginId", userLogin.getString("userLoginId")
+                            ,"thruDate",null), UtilMisc.toList("-fromDate"), null, false);
+                    if (UtilValidate.isNotEmpty(visitList)) {
+                        GenericValue visitMap = EntityUtil.getFirst(visitList);
+                        GenericValue chechLoggedOutMap = delegator.findByPrimaryKey("UserLogin", UtilMisc.toMap("userLoginId", username));
+                        String hasLoggedOut = chechLoggedOutMap.getString("hasLoggedOut");
+                        if (hasLoggedOut != null && "N".equals(hasLoggedOut) && !sessionId.equals(visitMap.getString("sessionId"))) {
+                            request.setAttribute("_ERROR_MESSAGE_", "User has Log on into the application Now.");
+                            return "error";
+                        }
+                    }
+                } catch (Exception e) {
+                    Debug.logInfo("error :" + e.getMessage(), module);
+                    request.setAttribute("_ERROR_MESSAGE_", e.getMessage());
+                    return "error";
+                }
+            }
+            */
 
             if ("Y".equals(request.getParameter("requirePasswordChange"))) {
                 Map<String, Object> inMap = UtilMisc.<String, Object>toMap("login.username", username, "login.password", password, "locale", UtilHttp.getLocale(request));
@@ -617,9 +641,11 @@
         if (currCatalog != null) session.setAttribute("CURRENT_CATALOG_ID", currCatalog);
         if (delegatorName != null) {
             // if there is a tenantId in the delegatorName remove it now so that tenant selection doesn't last beyond logout
+            /*
             if (delegatorName.indexOf('#') > 0) {
                 delegatorName = delegatorName.substring(0, delegatorName.indexOf('#'));
             }
+            */
             session.setAttribute("delegatorName", delegatorName);
 
             delegator = DelegatorFactory.getDelegator(delegatorName);
@@ -992,7 +1018,7 @@
                 contextPath = "/";
             }
             
-            ComponentConfig.WebappInfo info = ComponentConfig.getWebAppInfo(serverId, contextPath);
+            ComponentConfig.WebappInfo info = ComponentConfig.getWebAppInfo(serverId, request.getServerName(), contextPath);
             if (info != null) {
                 for (String permission: info.getBasePermission()) {
                     if (!"NONE".equals(permission) && !security.hasEntityPermission(permission, "_VIEW", userLogin)) {
Index: framework/webapp/src/org/ofbiz/webapp/control/ControlEventListener.java
===================================================================
--- framework/webapp/src/org/ofbiz/webapp/control/ControlEventListener.java	(revision 1447126)
+++ framework/webapp/src/org/ofbiz/webapp/control/ControlEventListener.java	(working copy)
@@ -81,6 +81,12 @@
                 if (visit != null) {
                     visit.set("thruDate", new Timestamp(session.getLastAccessedTime()));
                     visit.store();
+                    //also set hasLoggedOut as "Y"
+                    GenericValue userLoginMap = delegator.findOne("UserLogin", UtilMisc.toMap("userLoginId", visit.get("userLoginId")), false);
+                    if (UtilValidate.isNotEmpty(userLoginMap)) {
+                        userLoginMap.set("hasLoggedOut", "Y");
+                        userLoginMap.store();
+                    }
                 }
             } else {
                 Debug.logWarning("Could not find visit value object in session [" + session.getId() + "] that is being destroyed", module);
Index: framework/common/config/general.properties
===================================================================
--- framework/common/config/general.properties	(revision 1447126)
+++ framework/common/config/general.properties	(working copy)
@@ -136,7 +136,7 @@
 http.localhost=ABQIAAAAtt0d8djaYFkk8N5LJVcDSBT2yXp_ZAY8_ufC3CFXhHIE1NvwkxR3euHYk9bpwvdF2Qg1EYO1LQitHA
 
 # -- Y if you want to display the multi-tenant textbox in the login page and install specify components which related to each tenant
-multitenant=N
+multitenant=Y
 
 # -- Y if you use a cluster. Most of the time this should not be needed. Setting distributed-cache-clear-enabled="true" is enough 
 # -- to guarantee no sequenceIds duplicates. See OFBIZ-2353 for details
Index: framework/common/webcommon/login.ftl
===================================================================
--- framework/common/webcommon/login.ftl	(revision 1447126)
+++ framework/common/webcommon/login.ftl	(working copy)
@@ -42,6 +42,7 @@
             <td class="label">${uiLabelMap.CommonPassword}</td>
             <td><input type="password" name="PASSWORD" value="" size="20"/></td>
           </tr>
+          <#--
           <#if ("Y" == useMultitenant) >
               <#if !requestAttributes.tenantId?exists>
                   <tr>
@@ -52,6 +53,7 @@
                   <input type="hidden" name="tenantId" value="${requestAttributes.tenantId?if_exists}"/>
               </#if>
           </#if>
+          -->
           <tr>
             <td colspan="2" align="center">
               <input type="submit" value="${uiLabelMap.CommonLogin}"/>
Index: framework/common/src/org/ofbiz/common/UrlServletHelper.java
===================================================================
--- framework/common/src/org/ofbiz/common/UrlServletHelper.java	(revision 1447126)
+++ framework/common/src/org/ofbiz/common/UrlServletHelper.java	(working copy)
@@ -55,20 +55,31 @@
             // get tenant delegator by domain name
             String serverName = request.getServerName();
             try {
+                // first set the delegator to default
+                String delegatorName = servletContext.getInitParameter("entityDelegatorName");
+
+                if (delegatorName == null || delegatorName.length() <= 0) {
+                    delegatorName = "default";
+                }
+                if (Debug.verboseOn()) Debug.logVerbose("Setup Entity Engine Delegator with name " + delegatorName, module);
+                delegator = DelegatorFactory.getDelegator(delegatorName);
+                servletContext.setAttribute("delegator", delegator);
+                if (delegator == null) {
+                    Debug.logError("[ContextFilter.init] ERROR: delegator factory returned null for delegatorName \"" + delegatorName + "\"", module);
+                }
+                
                 // if tenant was specified, replace delegator with the new per-tenant delegator and set tenantId to session attribute
-                delegator = getDelegator(servletContext);
-                List<GenericValue> tenants = delegator.findList("Tenant", EntityCondition.makeCondition("domainName", serverName), null, UtilMisc.toList("-createdStamp"), null, false);
-                if (UtilValidate.isNotEmpty(tenants)) {
-                    GenericValue tenant = EntityUtil.getFirst(tenants);
-                    String tenantId = tenant.getString("tenantId");
+                List<GenericValue> tenantDomainNames = delegator.findList("TenantDomainName", EntityCondition.makeCondition("domainName", serverName), null, UtilMisc.toList("-createdStamp"), null, false);
+                if (UtilValidate.isNotEmpty(tenantDomainNames)) {
+                    GenericValue tenantDomainName = EntityUtil.getFirst(tenantDomainNames);
+                    String tenantId = tenantDomainName.getString("tenantId");
                     
                     // make that tenant active, setup a new delegator and a new dispatcher
-                    String tenantDelegatorName = delegator.getDelegatorBaseName() + "#" + tenantId;
-                    httpRequest.getSession().setAttribute("delegatorName", tenantDelegatorName);
+                    delegatorName = delegator.getDelegatorBaseName() + "#" + tenantId;
+                    httpRequest.getSession().setAttribute("delegatorName", delegatorName);
                 
                     // after this line the delegator is replaced with the new per-tenant delegator
-                    delegator = DelegatorFactory.getDelegator(tenantDelegatorName);
-                    servletContext.setAttribute("delegator", delegator);
+                    delegator = DelegatorFactory.getDelegator(delegatorName);
                 }
                 
             } catch (GenericEntityException e) {
@@ -79,6 +90,7 @@
         // set the web context in the request for future use
         request.setAttribute("servletContext", httpRequest.getSession().getServletContext());
         request.setAttribute("delegator", delegator);
+        servletContext.setAttribute("delegator", delegator);
 
         // set the webSiteId in the session
         if (UtilValidate.isEmpty(httpRequest.getSession().getAttribute("webSiteId"))){
Index: framework/entityext/src/org/ofbiz/entityext/eca/DelegatorEcaHandler.java
===================================================================
--- framework/entityext/src/org/ofbiz/entityext/eca/DelegatorEcaHandler.java	(revision 1447126)
+++ framework/entityext/src/org/ofbiz/entityext/eca/DelegatorEcaHandler.java	(working copy)
@@ -53,11 +53,11 @@
         this.dctx = EntityServiceFactory.getDispatchContext(delegator);
 
         //preload the cache
-        EntityEcaUtil.getEntityEcaCache(this.entityEcaReaderName);
+        EntityEcaUtil.getEntityEcaCache(this.entityEcaReaderName, delegator);
     }
 
     public Map<String, List<EntityEcaRule>> getEntityEventMap(String entityName) {
-        Map<String, Map<String, List<EntityEcaRule>>> ecaCache = EntityEcaUtil.getEntityEcaCache(this.entityEcaReaderName);
+        Map<String, Map<String, List<EntityEcaRule>>> ecaCache = EntityEcaUtil.getEntityEcaCache(this.entityEcaReaderName, delegator);
         if (ecaCache == null) return null;
         return ecaCache.get(entityName);
     }
Index: framework/entityext/src/org/ofbiz/entityext/eca/EntityEcaUtil.java
===================================================================
--- framework/entityext/src/org/ofbiz/entityext/eca/EntityEcaUtil.java	(revision 1447126)
+++ framework/entityext/src/org/ofbiz/entityext/eca/EntityEcaUtil.java	(working copy)
@@ -34,12 +34,18 @@
 import org.ofbiz.base.config.MainResourceHandler;
 import org.ofbiz.base.config.ResourceHandler;
 import org.ofbiz.base.util.Debug;
+import org.ofbiz.base.util.UtilMisc;
+import org.ofbiz.base.util.UtilValidate;
 import org.ofbiz.base.util.UtilXml;
 import org.ofbiz.base.util.cache.UtilCache;
 import org.ofbiz.entity.Delegator;
+import org.ofbiz.entity.DelegatorFactory;
+import org.ofbiz.entity.GenericEntityException;
+import org.ofbiz.entity.GenericValue;
 import org.ofbiz.entity.config.DelegatorInfo;
 import org.ofbiz.entity.config.EntityConfigUtil;
 import org.ofbiz.entity.config.EntityEcaReaderInfo;
+import org.ofbiz.entity.util.EntityUtil;
 import org.w3c.dom.Element;
 
 /**
@@ -49,13 +55,19 @@
 
     public static final String module = EntityEcaUtil.class.getName();
 
-    private static final UtilCache<String, Map<String, Map<String, List<EntityEcaRule>>>> entityEcaReaders = UtilCache.createUtilCache("entity.EcaReaders", 0, 0, false);
+    private static final UtilCache<String, UtilCache<String, Map<String, Map<String, List<EntityEcaRule>>>>> tenantEntityEcaReaders = UtilCache.createUtilCache("entity.EcaReaders", 0, 0, false);
 
-    public static Map<String, Map<String, List<EntityEcaRule>>> getEntityEcaCache(String entityEcaReaderName) {
+    public static Map<String, Map<String, List<EntityEcaRule>>> getEntityEcaCache(String entityEcaReaderName, Delegator delegator) {
+        UtilCache<String, Map<String, Map<String, List<EntityEcaRule>>>> entityEcaReaders = tenantEntityEcaReaders.get(delegator.getDelegatorName());
+        if (UtilValidate.isEmpty(entityEcaReaders)) {
+            entityEcaReaders = UtilCache.createUtilCache("entity.EcaReaders." + delegator.getDelegatorName(), 0, 0, false);
+            tenantEntityEcaReaders.put(delegator.getDelegatorName(), entityEcaReaders);
+        }
+        
         Map<String, Map<String, List<EntityEcaRule>>> ecaCache = entityEcaReaders.get(entityEcaReaderName);
         if (ecaCache == null) {
             ecaCache = FastMap.newInstance();
-            readConfig(entityEcaReaderName, ecaCache);
+            readConfig(entityEcaReaderName, ecaCache, delegator);
             ecaCache = entityEcaReaders.putIfAbsentAndGet(entityEcaReaderName, ecaCache);
         }
         return ecaCache;
@@ -70,7 +82,7 @@
         return delegatorInfo.entityEcaReader;
     }
 
-    protected static void readConfig(String entityEcaReaderName, Map<String, Map<String, List<EntityEcaRule>>> ecaCache) {
+    protected static void readConfig(String entityEcaReaderName, Map<String, Map<String, List<EntityEcaRule>>> ecaCache, Delegator delegator) {
         EntityEcaReaderInfo entityEcaReaderInfo = EntityConfigUtil.getEntityEcaReaderInfo(entityEcaReaderName);
         if (entityEcaReaderInfo == null) {
             Debug.logError("BAD ERROR: Could not find entity-eca-reader config with name: " + entityEcaReaderName, module);
@@ -80,14 +92,29 @@
         List<Future<List<EntityEcaRule>>> futures = FastList.newInstance();
         for (Element eecaResourceElement: entityEcaReaderInfo.resourceElements) {
             ResourceHandler handler = new MainResourceHandler(EntityConfigUtil.ENTITY_ENGINE_XML_FILENAME, eecaResourceElement);
-            futures.add(ExecutionPool.GLOBAL_EXECUTOR.submit(createEcaLoaderCallable(handler)));
+            futures.add(ExecutionPool.GLOBAL_EXECUTOR.submit(createEcaLoaderCallable(handler, delegator)));
         }
 
         // get all of the component resource eca stuff, ie specified in each ofbiz-component.xml file
-        for (ComponentConfig.EntityResourceInfo componentResourceInfo: ComponentConfig.getAllEntityResourceInfos("eca")) {
-            if (entityEcaReaderName.equals(componentResourceInfo.readerName)) {
-                futures.add(ExecutionPool.GLOBAL_EXECUTOR.submit(createEcaLoaderCallable(componentResourceInfo.createResourceHandler())));
+        try {
+            List<String> componentNames = null;
+            if (UtilValidate.isNotEmpty(delegator.getDelegatorTenantId())) {
+                Delegator baseDelegator = DelegatorFactory.getDelegator(delegator.getDelegatorBaseName());
+                List<GenericValue> tenantComponents = baseDelegator.findByAnd("TenantComponent", UtilMisc.toMap("tenantId", delegator.getDelegatorTenantId()), null, false);
+                componentNames = EntityUtil.getFieldListFromEntityList(tenantComponents, "componentName", true);
+            } else {
+                componentNames = ComponentConfig.getDefaultHotDeployComponentNames();
             }
+            Collection<ComponentConfig> components = ComponentConfig.getTenantComponents(componentNames);
+            for (ComponentConfig component : components) {
+                for (ComponentConfig.EntityResourceInfo componentResourceInfo: ComponentConfig.getAllEntityResourceInfos("eca", component.getComponentName())) {
+                    if (entityEcaReaderName.equals(componentResourceInfo.readerName)) {
+                        futures.add(ExecutionPool.GLOBAL_EXECUTOR.submit(createEcaLoaderCallable(componentResourceInfo.createResourceHandler(), delegator)));
+                    }
+                }
+            }
+        } catch (GenericEntityException e) {
+            Debug.logError(e, module);
         }
 
         for (List<EntityEcaRule> oneFileRules: ExecutionPool.getAllFutures(futures)) {
@@ -113,7 +140,7 @@
         }
     }
 
-    private static List<EntityEcaRule> getEcaDefinitions(ResourceHandler handler) {
+    private static List<EntityEcaRule> getEcaDefinitions(ResourceHandler handler, Delegator delegator) {
         List<EntityEcaRule> rules = FastList.newInstance();
         Element rootElement = null;
         try {
@@ -126,23 +153,23 @@
             rules.add(new EntityEcaRule(e));
         }
         try {
-            Debug.logImportant("Loaded [" + StringUtil.leftPad(Integer.toString(rules.size()), 3) + "] Entity ECA definitions from " + handler.getFullLocation() + " in loader " + handler.getLoaderName(), module);
+            Debug.logImportant("Loaded [" + delegator.getDelegatorName() + "] [" + StringUtil.leftPad(Integer.toString(rules.size()), 3) + "] Entity ECA definitions from " + handler.getFullLocation() + " in loader " + handler.getLoaderName(), module);
         } catch (GenericConfigException e) {
             Debug.logError(e, module);
         }
         return rules;
     }
 
-    protected static Callable<List<EntityEcaRule>> createEcaLoaderCallable(final ResourceHandler handler) {
+    protected static Callable<List<EntityEcaRule>> createEcaLoaderCallable(final ResourceHandler handler, final Delegator delegator) {
         return new Callable<List<EntityEcaRule>>() {
             public List<EntityEcaRule> call() throws Exception {
-                return getEcaDefinitions(handler);
+                return getEcaDefinitions(handler, delegator);
             }
         };
     }
 
     public static Collection<EntityEcaRule> getEntityEcaRules(Delegator delegator, String entityName, String event) {
-        Map<String, Map<String, List<EntityEcaRule>>> ecaCache = EntityEcaUtil.getEntityEcaCache(EntityEcaUtil.getEntityEcaReaderName(delegator.getDelegatorName()));
+        Map<String, Map<String, List<EntityEcaRule>>> ecaCache = EntityEcaUtil.getEntityEcaCache(EntityEcaUtil.getEntityEcaReaderName(delegator.getDelegatorName()), delegator);
         Map<String, List<EntityEcaRule>> eventMap = ecaCache.get(entityName);
         if (eventMap != null) {
             if (event != null) {
Index: framework/entityext/src/org/ofbiz/entityext/data/EntityDataLoadContainer.java
===================================================================
--- framework/entityext/src/org/ofbiz/entityext/data/EntityDataLoadContainer.java	(revision 1447126)
+++ framework/entityext/src/org/ofbiz/entityext/data/EntityDataLoadContainer.java	(working copy)
@@ -307,8 +307,20 @@
                 Debug.logError(e.getMessage(), module);
             }
         }
-        // load specify components
+        
+        // get standard components
+        List<ComponentConfig> standardComponents = FastList.newInstance();
+        standardComponents.addAll(ComponentConfig.getFrameworkComponents());
+        standardComponents.addAll(ComponentConfig.getApplicationsComponents());
+        standardComponents.addAll(ComponentConfig.getSpecialpurposeComponents());
+        standardComponents.addAll(ComponentConfig.getThemesComponents());
+        
+        // load standard components
         List<String> loadComponents = FastList.newInstance();
+        for (ComponentConfig componentConfig : standardComponents) {
+            loadComponents.add(componentConfig.getComponentName());
+        }
+        
         if (UtilValidate.isNotEmpty(delegator.getDelegatorTenantId()) && "Y".equals(UtilProperties.getPropertyValue("general.properties", "multitenant"))) {
             try {
                 List<EntityExpr> exprs = FastList.newInstance();
@@ -341,6 +353,8 @@
             } catch (GenericEntityException e) {
                 Debug.logError(e.getMessage(), module);
             }
+        } else if (UtilValidate.isEmpty(delegator.getDelegatorTenantId()) && "Y".equals(UtilProperties.getPropertyValue("general.properties", "multitenant"))) {
+            loadComponents.addAll(ComponentConfig.getDefaultHotDeployComponentNames());
         }
         // check for drop index/fks
         if (dropConstraints) {
@@ -432,6 +446,16 @@
                 urlList = EntityDataLoader.getUrlList(helperInfo.getHelperBaseName(), component);
             }
         }
+        
+        // load tenant reader data from hot-deploy components if requested
+        if (UtilValidate.isNotEmpty(readerNames) && readerNames.contains("tenant")) {
+            List<String> loadHotDeployComponents = FastList.newInstance();
+            for (ComponentConfig component : ComponentConfig.getHotDeployComponents()) {
+                loadHotDeployComponents.add(component.getComponentName());
+            }
+            urlList.addAll(EntityDataLoader.getUrlByComponentList(helperInfo.getHelperBaseName(), loadHotDeployComponents, UtilMisc.toList("tenant")));
+        }
+        
         // need a list if it is empty
         if (urlList == null) {
             urlList = FastList.newInstance();
@@ -565,6 +589,8 @@
                 }
             }
         }
+
+        dbUtil.close();
     }
     /**
      * @see org.ofbiz.base.container.Container#stop()
Index: framework/entityext/src/org/ofbiz/entityext/data/EntityDataServices.java
===================================================================
--- framework/entityext/src/org/ofbiz/entityext/data/EntityDataServices.java	(revision 1447126)
+++ framework/entityext/src/org/ofbiz/entityext/data/EntityDataServices.java	(working copy)
@@ -407,6 +407,8 @@
         // step 8 - checkdb
         Debug.logImportant("Running DB check with add missing enabled", module);
         dbUtil.checkDb(modelEntities, messages, true);
+        
+        dbUtil.close();
 
         Map<String, Object> result = ServiceUtil.returnSuccess();
         result.put("messages", messages);
Index: framework/webtools/src/org/ofbiz/webtools/artifactinfo/ServiceArtifactInfo.java
===================================================================
--- framework/webtools/src/org/ofbiz/webtools/artifactinfo/ServiceArtifactInfo.java	(revision 1447126)
+++ framework/webtools/src/org/ofbiz/webtools/artifactinfo/ServiceArtifactInfo.java	(working copy)
@@ -39,6 +39,7 @@
 import org.ofbiz.base.util.UtilJavaParse;
 import org.ofbiz.base.util.UtilMisc;
 import org.ofbiz.base.util.UtilPlist;
+import org.ofbiz.entity.Delegator;
 import org.ofbiz.minilang.MiniLangException;
 import org.ofbiz.minilang.SimpleMethod;
 import org.ofbiz.service.ModelParam;
@@ -72,10 +73,10 @@
      *
      * @throws GeneralException
      */
-    public void populateAll() throws GeneralException {
+    public void populateAll(Delegator delegator) throws GeneralException {
         this.populateUsedEntities();
-        this.populateCalledServices();
-        this.populateTriggeredServiceEcas();
+        this.populateCalledServices(delegator);
+        this.populateTriggeredServiceEcas(delegator);
     }
 
     protected void populateUsedEntities() throws GeneralException {
@@ -138,7 +139,7 @@
         }
     }
 
-    protected void populateCalledServices() throws GeneralException {
+    protected void populateCalledServices(Delegator delegator) throws GeneralException {
         // populate servicesCalledByThisService and for each the reverse-associate cache in the aif
         if ("simple".equals(this.modelService.engineName)) {
             // we can do something with this!
@@ -180,7 +181,7 @@
             Set<String> allServiceNameSet = FastSet.newInstance();
             GroupModel groupModel = modelService.internalGroup;
             if (groupModel == null) {
-                groupModel = ServiceGroupReader.getGroupModel(this.modelService.location);
+                groupModel = ServiceGroupReader.getGroupModel(this.modelService.location, delegator);
             }
 
             if (groupModel != null) {
@@ -211,9 +212,9 @@
         }
     }
 
-    protected void populateTriggeredServiceEcas() throws GeneralException {
+    protected void populateTriggeredServiceEcas(Delegator delegator) throws GeneralException {
         // populate serviceEcasTriggeredByThisService and for each the reverse-associate cache in the aif
-        Map<String, List<ServiceEcaRule>> serviceEventMap = ServiceEcaUtil.getServiceEventMap(this.modelService.name);
+        Map<String, List<ServiceEcaRule>> serviceEventMap = ServiceEcaUtil.getServiceEventMap(this.modelService.name, delegator);
         if (serviceEventMap == null) return;
         for (List<ServiceEcaRule> ecaRuleList: serviceEventMap.values()) {
             for (ServiceEcaRule ecaRule: ecaRuleList) {
Index: framework/webtools/src/org/ofbiz/webtools/artifactinfo/ArtifactInfoFactory.java
===================================================================
--- framework/webtools/src/org/ofbiz/webtools/artifactinfo/ArtifactInfoFactory.java	(revision 1447126)
+++ framework/webtools/src/org/ofbiz/webtools/artifactinfo/ArtifactInfoFactory.java	(working copy)
@@ -216,7 +216,7 @@
         if (curInfo == null) {
             curInfo = new ServiceArtifactInfo(serviceName, this);
             this.allServiceInfos.put(serviceName, curInfo);
-            curInfo.populateAll();
+            curInfo.populateAll(this.dispatchContext.getDelegator());
         }
         return curInfo;
     }
Index: framework/webtools/webapp/webtools/WEB-INF/actions/service/AvailableServices.groovy
===================================================================
--- framework/webtools/webapp/webtools/WEB-INF/actions/service/AvailableServices.groovy	(revision 1447126)
+++ framework/webtools/webapp/webtools/WEB-INF/actions/service/AvailableServices.groovy	(working copy)
@@ -29,8 +29,8 @@
 import org.ofbiz.base.util.UtilHttp;
 import org.ofbiz.base.util.UtilProperties;
 
-List getEcaListForService(String selectedService) {
-    ecaMap = org.ofbiz.service.eca.ServiceEcaUtil.getServiceEventMap(selectedService);
+List getEcaListForService(String selectedService, delegator) {
+    ecaMap = org.ofbiz.service.eca.ServiceEcaUtil.getServiceEventMap(selectedService, delegator);
 
     if (!ecaMap) return null;
 
@@ -363,7 +363,7 @@
         maxRetry = curServiceModel.maxRetry;
 
         //Test for ECA's
-        ecaMapList = getEcaListForService(selectedService);
+        ecaMapList = getEcaListForService(selectedService, delegator);
         if (ecaMapList) {
             context.ecaMapList = ecaMapList;
         }
Index: framework/testtools/src/org/ofbiz/testtools/ModelTestSuite.java
===================================================================
--- framework/testtools/src/org/ofbiz/testtools/ModelTestSuite.java	(revision 1447126)
+++ framework/testtools/src/org/ofbiz/testtools/ModelTestSuite.java	(working copy)
@@ -36,6 +36,7 @@
 import org.ofbiz.entity.Delegator;
 import org.ofbiz.entity.DelegatorFactory;
 import org.ofbiz.entity.testtools.EntityTestCase;
+import org.ofbiz.entity.util.EntityUtilProperties;
 import org.ofbiz.minilang.MiniLangException;
 import org.ofbiz.minilang.SimpleMethod;
 import org.ofbiz.service.LocalDispatcher;
@@ -68,11 +69,29 @@
         this.originalDispatcherName = mainElement.getAttribute("dispatcher-name");
         if (UtilValidate.isEmpty(this.originalDispatcherName)) this.originalDispatcherName = "test-dispatcher";
 
-        String uniqueSuffix = "-" + RandomStringUtils.randomAlphanumeric(10);
+        Delegator originalDelegator = DelegatorFactory.getDelegator(this.originalDelegatorName);
+        String useMultitenant = EntityUtilProperties.getPropertyValue("general.properties", "multitenant", originalDelegator);
+        if ("Y".equals(useMultitenant) && UtilValidate.isNotEmpty(originalDelegator.getDelegatorTenantId())) {
+            
+            this.delegator = originalDelegator.makeTestDelegator(originalDelegator.getDelegatorName());
+            LocalDispatcher originalDispatcher = ServiceContainer.getLocalDispatcher(this.delegator.getDelegatorName(), this.delegator);
+            this.dispatcher = originalDispatcher;
+            
+            /*
+            ModelReader.readers.put(this.delegator.getDelegatorName(), ModelReader.readers.get(originalDelegator.getDelegatorName()));
+            DispatchContext dispatchContext = this.dispatcher.getDispatchContext();
+            originalDispatcher.getDispatchContext().loadReaders();
+            DispatchContext.tenantModelServiceMapByDispatcher.put(dispatchContext.getName(), DispatchContext.tenantModelServiceMapByDispatcher.get(originalDispatcher.getDispatchContext().getName()));
+            EntityEcaUtil.tenantEntityEcaReaders.put(this.delegator.getDelegatorName(), EntityEcaUtil.tenantEntityEcaReaders.get(originalDelegator.getDelegatorName()));
+            ServiceEcaUtil.tenantEcaCache.put(this.delegator.getDelegatorName(), ServiceEcaUtil.tenantEcaCache.get(originalDelegator.getDelegatorName()));
+            ServiceGroupReader.tenantGroupsCache.put(this.delegator.getDelegatorName(), ServiceGroupReader.tenantGroupsCache.get(originalDelegator.getDelegatorName()));
+            */
+        } else {
+            String uniqueSuffix = "-" + RandomStringUtils.randomAlphanumeric(10);
+            this.delegator = originalDelegator.makeTestDelegator(this.originalDelegatorName + uniqueSuffix);
+            this.dispatcher = ServiceContainer.getLocalDispatcher(originalDispatcherName + uniqueSuffix, delegator);
+        }
 
-        this.delegator = DelegatorFactory.getDelegator(this.originalDelegatorName).makeTestDelegator(this.originalDelegatorName + uniqueSuffix);
-        this.dispatcher = ServiceContainer.getLocalDispatcher(originalDispatcherName + uniqueSuffix, delegator);
-
         for (Element testCaseElement : UtilXml.childElementList(mainElement, UtilMisc.toSet("test-case", "test-group"))) {
             String caseName = testCaseElement.getAttribute("case-name");
             String nodeName = testCaseElement.getNodeName();
Index: framework/testtools/build.xml
===================================================================
--- framework/testtools/build.xml	(revision 1447126)
+++ framework/testtools/build.xml	(working copy)
@@ -37,6 +37,7 @@
         <fileset dir="../base/build/lib" includes="*.jar"/>
         <fileset dir="../entity/lib" includes="*.jar"/>
         <fileset dir="../entity/build/lib" includes="*.jar"/>
+        <fileset dir="../entityext/build/lib" includes="*.jar"/>
         <fileset dir="../security/build/lib" includes="*.jar"/>
         <fileset dir="../service/lib" includes="*.jar"/>
         <fileset dir="../service/build/lib" includes="*.jar"/>
Index: framework/service/src/org/ofbiz/service/DispatchContext.java
===================================================================
--- framework/service/src/org/ofbiz/service/DispatchContext.java	(revision 1447126)
+++ framework/service/src/org/ofbiz/service/DispatchContext.java	(working copy)
@@ -19,6 +19,7 @@
 package org.ofbiz.service;
 
 import java.io.Serializable;
+import java.util.Collection;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -32,16 +33,22 @@
 import javolution.util.FastMap;
 
 import org.ofbiz.base.component.ComponentConfig;
+import org.ofbiz.base.component.ComponentConfig.ServiceResourceInfo;
 import org.ofbiz.base.concurrent.ExecutionPool;
 import org.ofbiz.base.config.GenericConfigException;
 import org.ofbiz.base.config.MainResourceHandler;
 import org.ofbiz.base.config.ResourceHandler;
 import org.ofbiz.base.util.Debug;
+import org.ofbiz.base.util.UtilMisc;
+import org.ofbiz.base.util.UtilValidate;
 import org.ofbiz.base.util.UtilXml;
 import org.ofbiz.base.util.cache.UtilCache;
 import org.ofbiz.entity.Delegator;
+import org.ofbiz.entity.GenericEntityException;
+import org.ofbiz.entity.GenericValue;
 import org.ofbiz.entity.config.DelegatorInfo;
 import org.ofbiz.entity.config.EntityConfigUtil;
+import org.ofbiz.entity.util.EntityUtil;
 import org.ofbiz.security.Security;
 import org.ofbiz.service.config.ServiceConfigUtil;
 import org.ofbiz.service.eca.ServiceEcaUtil;
@@ -56,13 +63,14 @@
 
     public static final String module = DispatchContext.class.getName();
 
-    private static final UtilCache<String, Map<String, ModelService>> modelServiceMapByModel = UtilCache.createUtilCache("service.ModelServiceMapByModel", 0, 0, false);
+    public static UtilCache<String, UtilCache<String, Map<String, ModelService>>> tenantModelServiceMapByModel = UtilCache.createUtilCache("service.ModelServiceMapByDispatcher", 0, 0, false);
 
     // these four fields represent the immutable state of a DispatchContext object
     private final String name;
     private final transient ClassLoader loader;
     private final transient LocalDispatcher dispatcher;
     private final String model;
+    protected Map<String, Map<String, ModelService>> modelServiceMapByDispatcher = null;
 
     /**
      * Creates new DispatchContext as an immutable object.
@@ -94,7 +102,12 @@
             modelName = name;
         }
         this.model = modelName;
-        getGlobalServiceMap();
+        
+        try {
+            getGlobalServiceMap(getTenantComponentNames());
+        } catch (GenericServiceException e) {
+            Debug.logError(e, module);
+        }
     }
 
     /**
@@ -200,7 +213,7 @@
      * @return GenericServiceModel that corresponds to the serviceName
      */
     public ModelService getModelService(String serviceName) throws GenericServiceException {
-        Map<String, ModelService> serviceMap = getGlobalServiceMap();
+        Map<String, ModelService> serviceMap = getGlobalServiceMap(getTenantComponentNames());
         ModelService retVal = null;
         if (serviceMap != null) {
             retVal = serviceMap.get(serviceName);
@@ -217,6 +230,7 @@
     public Set<String> getAllServiceNames() {
         Set<String> serviceNames = new TreeSet<String>();
 
+        UtilCache<String, Map<String, ModelService>> modelServiceMapByModel = tenantModelServiceMapByModel.get(this.dispatcher.getDelegator().getDelegatorName());
         Map<String, ModelService> globalServices = modelServiceMapByModel.get(this.model);
         if (globalServices != null) {
             serviceNames.addAll(globalServices.keySet());
@@ -237,7 +251,12 @@
         };
     }
 
-    private Map<String, ModelService> getGlobalServiceMap() {
+    private Map<String, ModelService> getGlobalServiceMap(List<String> componentNames) {
+        UtilCache<String, Map<String, ModelService>> modelServiceMapByModel = tenantModelServiceMapByModel.get(this.dispatcher.getDelegator().getDelegatorName());
+        if (UtilValidate.isEmpty(modelServiceMapByModel)) {
+            modelServiceMapByModel = UtilCache.createUtilCache("service.ModelServiceMapByModel." + this.dispatcher.getDelegator().getDelegatorName(), 0, 0, false);
+            tenantModelServiceMapByModel.put(this.dispatcher.getDelegator().getDelegatorName(), modelServiceMapByModel);
+        }
         Map<String, ModelService> serviceMap = modelServiceMapByModel.get(this.model);
         if (serviceMap == null) {
             serviceMap = FastMap.newInstance();
@@ -259,8 +278,16 @@
                 futures.add(ExecutionPool.GLOBAL_EXECUTOR.submit(createServiceReaderCallable(handler)));
             }
 
-            // get all of the component resource model stuff, ie specified in each ofbiz-component.xml file
-            for (ComponentConfig.ServiceResourceInfo componentResourceInfo: ComponentConfig.getAllServiceResourceInfos("model")) {
+            // get service resource infos
+            List<ServiceResourceInfo> serviceResourceInfos = FastList.newInstance();
+            Collection<ComponentConfig> components = ComponentConfig.getTenantComponents(componentNames);
+            for (ComponentConfig component : components) {
+                List<ServiceResourceInfo> componentServiceResourceInfos = ComponentConfig.getAllServiceResourceInfos("model", component.getComponentName());
+                serviceResourceInfos.addAll(componentServiceResourceInfos);
+            }
+            
+            // create resource handler
+            for (ComponentConfig.ServiceResourceInfo componentResourceInfo: serviceResourceInfos) {
                 futures.add(ExecutionPool.GLOBAL_EXECUTOR.submit(createServiceReaderCallable(componentResourceInfo.createResourceHandler())));
             }
             for (Map<String, ModelService> servicesMap: ExecutionPool.getAllFutures(futures)) {
@@ -272,10 +299,28 @@
             if (serviceMap != null) {
                 Map<String, ModelService> cachedServiceMap = modelServiceMapByModel.putIfAbsentAndGet(this.model, serviceMap);
                 if (cachedServiceMap == serviceMap) { // same object: this means that the object created by this thread was actually added to the cache
-                    ServiceEcaUtil.reloadConfig();
+                    ServiceEcaUtil.reloadConfig(this.dispatcher.getDelegator());
                 }
             }
         }
         return serviceMap;
     }
+    
+    private List<String> getTenantComponentNames() throws GenericServiceException {
+        List<String> componentNames = null;
+        Delegator delegator = getDelegator();
+        String tenantId = delegator.getDelegatorTenantId();
+        if (UtilValidate.isNotEmpty(tenantId)) {
+            // get tenant components
+            try {
+                List<GenericValue> tenantComponents = delegator.findByAnd("TenantComponent", UtilMisc.toMap("tenantId", tenantId), UtilMisc.toList("sequenceNum"), false);
+                componentNames = EntityUtil.getFieldListFromEntityList(tenantComponents, "componentName", true);
+            } catch (GenericEntityException e) {
+                throw new GenericServiceException(e);
+            }
+        } else {
+            componentNames = ComponentConfig.getDefaultHotDeployComponentNames();
+        }
+        return componentNames;
+    }
 }
Index: framework/service/src/org/ofbiz/service/eca/ServiceEcaUtil.java
===================================================================
--- framework/service/src/org/ofbiz/service/eca/ServiceEcaUtil.java	(revision 1447126)
+++ framework/service/src/org/ofbiz/service/eca/ServiceEcaUtil.java	(working copy)
@@ -35,8 +35,13 @@
 import org.ofbiz.base.config.MainResourceHandler;
 import org.ofbiz.base.config.ResourceHandler;
 import org.ofbiz.base.util.Debug;
+import org.ofbiz.base.util.UtilMisc;
 import org.ofbiz.base.util.UtilValidate;
 import org.ofbiz.base.util.UtilXml;
+import org.ofbiz.entity.Delegator;
+import org.ofbiz.entity.GenericEntityException;
+import org.ofbiz.entity.GenericValue;
+import org.ofbiz.entity.util.EntityUtil;
 import org.ofbiz.service.DispatchContext;
 import org.ofbiz.service.GenericServiceException;
 import org.ofbiz.service.config.ServiceConfigUtil;
@@ -52,14 +57,21 @@
     public static final String module = ServiceEcaUtil.class.getName();
 
     // using a cache is dangerous here because if someone clears it the ECAs won't run: public static UtilCache ecaCache = new UtilCache("service.ServiceECAs", 0, 0, false);
-    public static Map<String, Map<String, List<ServiceEcaRule>>> ecaCache = FastMap.newInstance();
+    public static Map<String, Map<String, Map<String, List<ServiceEcaRule>>>> tenantEcaCache = FastMap.newInstance();
 
-    public static void reloadConfig() {
+    public static void reloadConfig(Delegator delegator) {
+        Map<String, Map<String, List<ServiceEcaRule>>> ecaCache = tenantEcaCache.get(delegator.getDelegatorName());
         ecaCache.clear();
-        readConfig();
+        readConfig(delegator);
     }
 
-    public static void readConfig() {
+    public static void readConfig(Delegator delegator) {
+        Map<String, Map<String, List<ServiceEcaRule>>> ecaCache = tenantEcaCache.get(delegator.getDelegatorName());
+        if (UtilValidate.isEmpty(ecaCache)) {
+            ecaCache = FastMap.newInstance();
+            tenantEcaCache.put(delegator.getDelegatorName(), ecaCache);
+        }
+        
         // Only proceed if the cache hasn't already been populated, caller should be using reloadConfig() in that situation
         if (UtilValidate.isNotEmpty(ecaCache)) {
             return;
@@ -75,33 +87,47 @@
         List<Future<List<ServiceEcaRule>>> futures = FastList.newInstance();
         for (Element serviceEcasElement: UtilXml.childElementList(rootElement, "service-ecas")) {
             ResourceHandler handler = new MainResourceHandler(ServiceConfigUtil.SERVICE_ENGINE_XML_FILENAME, serviceEcasElement);
-            futures.add(ExecutionPool.GLOBAL_EXECUTOR.submit(createEcaLoaderCallable(handler)));
+            futures.add(ExecutionPool.GLOBAL_EXECUTOR.submit(createEcaLoaderCallable(handler, delegator)));
         }
 
         // get all of the component resource eca stuff, ie specified in each ofbiz-component.xml file
-        for (ComponentConfig.ServiceResourceInfo componentResourceInfo: ComponentConfig.getAllServiceResourceInfos("eca")) {
-            futures.add(ExecutionPool.GLOBAL_EXECUTOR.submit(createEcaLoaderCallable(componentResourceInfo.createResourceHandler())));
+        try {
+            Collection<ComponentConfig> components = null;
+            if (UtilValidate.isNotEmpty(delegator.getDelegatorTenantId())) {
+                List<GenericValue> tenantComponents = delegator.findByAnd("TenantComponent", UtilMisc.toMap("tenantId", delegator.getDelegatorTenantId()), null, false);
+                List<String> componentNames = EntityUtil.getFieldListFromEntityList(tenantComponents, "componentName", true);
+                components = ComponentConfig.getTenantComponents(componentNames);
+            } else {
+                components = ComponentConfig.getDefaultTenantComponents();
+            }
+            for (ComponentConfig component : components) {
+                for (ComponentConfig.ServiceResourceInfo componentResourceInfo: ComponentConfig.getAllServiceResourceInfos("eca", component.getComponentName())) {
+                    futures.add(ExecutionPool.GLOBAL_EXECUTOR.submit(createEcaLoaderCallable(componentResourceInfo.createResourceHandler(), delegator)));
+                }
+            }
+        } catch (GenericEntityException e) {
+            Debug.logError(e, module);
         }
 
         for (List<ServiceEcaRule> handlerRules: ExecutionPool.getAllFutures(futures)) {
-            mergeEcaDefinitions(handlerRules);
+            mergeEcaDefinitions(handlerRules, delegator);
         }
     }
 
-    protected static Callable<List<ServiceEcaRule>> createEcaLoaderCallable(final ResourceHandler handler) {
+    protected static Callable<List<ServiceEcaRule>> createEcaLoaderCallable(final ResourceHandler handler, final Delegator delegator) {
         return new Callable<List<ServiceEcaRule>>() {
             public List<ServiceEcaRule> call() throws Exception {
-                return getEcaDefinitions(handler);
+                return getEcaDefinitions(handler, delegator);
             }
         };
     }
 
-    public static void addEcaDefinitions(ResourceHandler handler) {
-        List<ServiceEcaRule> handlerRules = getEcaDefinitions(handler);
-        mergeEcaDefinitions(handlerRules);
+    public static void addEcaDefinitions(ResourceHandler handler, Delegator delegator) {
+        List<ServiceEcaRule> handlerRules = getEcaDefinitions(handler, delegator);
+        mergeEcaDefinitions(handlerRules, delegator);
     }
 
-    private static List<ServiceEcaRule> getEcaDefinitions(ResourceHandler handler) {
+    private static List<ServiceEcaRule> getEcaDefinitions(ResourceHandler handler, Delegator delegator) {
         List<ServiceEcaRule> handlerRules = FastList.newInstance();
         Element rootElement = null;
         try {
@@ -126,7 +152,8 @@
         return handlerRules;
     }
 
-    private static void mergeEcaDefinitions(List<ServiceEcaRule> handlerRules) {
+    private static void mergeEcaDefinitions(List<ServiceEcaRule> handlerRules, Delegator delegator) {
+        Map<String, Map<String, List<ServiceEcaRule>>> ecaCache = tenantEcaCache.get(delegator.getDelegatorName());
         for (ServiceEcaRule rule: handlerRules) {
             String serviceName = rule.getServiceName();
             String eventName = rule.getEventName();
@@ -149,13 +176,18 @@
         }
     }
 
-    public static Map<String, List<ServiceEcaRule>> getServiceEventMap(String serviceName) {
-        if (ServiceEcaUtil.ecaCache == null) ServiceEcaUtil.readConfig();
-        return ServiceEcaUtil.ecaCache.get(serviceName);
+    public static Map<String, List<ServiceEcaRule>> getServiceEventMap(String serviceName, Delegator delegator) {
+        Map<String, Map<String, List<ServiceEcaRule>>> ecaCache = tenantEcaCache.get(delegator.getDelegatorName());
+        if (UtilValidate.isEmpty(ecaCache)) {
+            ServiceEcaUtil.readConfig(delegator);
+            tenantEcaCache.put(delegator.getDelegatorName(), ecaCache);
+        }
+        
+        return ecaCache.get(serviceName);
     }
 
-    public static List<ServiceEcaRule> getServiceEventRules(String serviceName, String event) {
-        Map<String, List<ServiceEcaRule>> eventMap = getServiceEventMap(serviceName);
+    public static List<ServiceEcaRule> getServiceEventRules(String serviceName, String event, Delegator delegator) {
+        Map<String, List<ServiceEcaRule>> eventMap = getServiceEventMap(serviceName, delegator);
         if (eventMap != null) {
             if (event != null) {
                 return eventMap.get(event);
@@ -172,7 +204,7 @@
 
     public static void evalRules(String serviceName, Map<String, List<ServiceEcaRule>> eventMap, String event, DispatchContext dctx, Map<String, Object> context, Map<String, Object> result, boolean isError, boolean isFailure) throws GenericServiceException {
         // if the eventMap is passed we save a Map lookup, but if not that's okay we'll just look it up now
-        if (eventMap == null) eventMap = getServiceEventMap(serviceName);
+        if (eventMap == null) eventMap = getServiceEventMap(serviceName, dctx.getDelegator());
         if (UtilValidate.isEmpty(eventMap)) {
             return;
         }
@@ -188,4 +220,8 @@
             eca.eval(serviceName, dctx, context, result, isError, isFailure, actionsRun);
         }
     }
+    
+    public static Map<String, Map<String, List<ServiceEcaRule>>> getEcaCache(Delegator delegator) {
+        return tenantEcaCache.get(delegator.getDelegatorName());
+    }
 }
Index: framework/service/src/org/ofbiz/service/group/ServiceGroupReader.java
===================================================================
--- framework/service/src/org/ofbiz/service/group/ServiceGroupReader.java	(revision 1447126)
+++ framework/service/src/org/ofbiz/service/group/ServiceGroupReader.java	(working copy)
@@ -18,9 +18,12 @@
  *******************************************************************************/
 package org.ofbiz.service.group;
 
+import java.util.Collection;
+import java.util.List;
 import java.util.Map;
 
 import freemarker.template.utility.StringUtil;
+import javolution.util.FastList;
 import javolution.util.FastMap;
 
 import org.ofbiz.base.component.ComponentConfig;
@@ -28,7 +31,14 @@
 import org.ofbiz.base.config.MainResourceHandler;
 import org.ofbiz.base.config.ResourceHandler;
 import org.ofbiz.base.util.Debug;
+import org.ofbiz.base.util.UtilMisc;
+import org.ofbiz.base.util.UtilProperties;
+import org.ofbiz.base.util.UtilValidate;
 import org.ofbiz.base.util.UtilXml;
+import org.ofbiz.entity.Delegator;
+import org.ofbiz.entity.GenericEntityException;
+import org.ofbiz.entity.GenericValue;
+import org.ofbiz.entity.util.EntityUtil;
 import org.ofbiz.service.config.ServiceConfigUtil;
 import org.w3c.dom.Element;
 
@@ -40,9 +50,22 @@
     public static final String module = ServiceGroupReader.class.getName();
 
     // using a cache is dangerous here because if someone clears it the groups won't work at all: public static UtilCache groupsCache = new UtilCache("service.ServiceGroups", 0, 0, false);
-    public static Map<String, GroupModel> groupsCache = FastMap.newInstance();
+    public static Map<String, Map<String, GroupModel>> tenantGroupsCache = FastMap.newInstance();
 
-    public static void readConfig() {
+    public static void readConfig(Delegator delegator) {
+        String delegatorName = null;
+        if (UtilValidate.isNotEmpty(delegator)) {
+            delegatorName = delegator.getDelegatorName();
+        } else {
+            delegatorName = "default";
+        }
+        
+        Map<String, GroupModel> groupsCache = tenantGroupsCache.get(delegator.getDelegatorName());
+        if (UtilValidate.isEmpty(groupsCache)) {
+            groupsCache = FastMap.newInstance();
+            tenantGroupsCache.put(delegatorName, groupsCache);
+        }
+        
         Element rootElement = null;
 
         try {
@@ -54,16 +77,31 @@
 
         for (Element serviceGroupElement: UtilXml.childElementList(rootElement, "service-groups")) {
             ResourceHandler handler = new MainResourceHandler(ServiceConfigUtil.SERVICE_ENGINE_XML_FILENAME, serviceGroupElement);
-            addGroupDefinitions(handler);
+            addGroupDefinitions(handler, delegator);
         }
-
-        // get all of the component resource group stuff, ie specified in each ofbiz-component.xml file
-        for (ComponentConfig.ServiceResourceInfo componentResourceInfo: ComponentConfig.getAllServiceResourceInfos("group")) {
-            addGroupDefinitions(componentResourceInfo.createResourceHandler());
+        
+        try {
+            Collection<ComponentConfig> components = null;
+            if (UtilValidate.isNotEmpty(delegator.getDelegatorTenantId())) {
+                List<GenericValue> tenantComponents = delegator.findByAnd("TenantComponent", UtilMisc.toMap("tenantId", delegator.getDelegatorTenantId()), UtilMisc.toList("sequenceNum"), false);
+                List<String> componentNames = EntityUtil.getFieldListFromEntityList(tenantComponents, "componentName", true);
+                components = ComponentConfig.getTenantComponents(componentNames);
+            } else {
+                components = ComponentConfig.getDefaultTenantComponents();
+            }
+            
+            for (ComponentConfig component : components) {
+                for (ComponentConfig.ServiceResourceInfo componentResourceInfo: ComponentConfig.getAllServiceResourceInfos("group", component.getComponentName())) {
+                    addGroupDefinitions(componentResourceInfo.createResourceHandler(), delegator);
+                }
+            }
+        } catch (GenericEntityException e) {
+            Debug.logError(e, module);
         }
     }
 
-    public static void addGroupDefinitions(ResourceHandler handler) {
+    public static void addGroupDefinitions(ResourceHandler handler, Delegator delegator) {
+        Map<String, GroupModel> groupsCache = tenantGroupsCache.get(delegator.getDelegatorName());
         Element rootElement = null;
 
         try {
@@ -86,13 +124,19 @@
             } catch (GenericConfigException e) {
                 Debug.logError(e, "Could not get resource URL", module);
             }
-            Debug.logImportant("Loaded [" + StringUtil.leftPad(Integer.toString(numDefs), 3) + "] Group definitions from " + resourceLocation, module);
-        }
+            Debug.logImportant("Loaded [" + delegator.getDelegatorName() + "] [" + StringUtil.leftPad(Integer.toString(numDefs), 3) + "] Group definitions from " + resourceLocation, module);
+         }
     }
 
-    public static GroupModel getGroupModel(String serviceName) {
+    public static GroupModel getGroupModel(String serviceName, Delegator delegator) {
+        Map<String, GroupModel> groupsCache = tenantGroupsCache.get(delegator.getDelegatorName());
+        if (UtilValidate.isEmpty(groupsCache)) {
+            groupsCache = FastMap.newInstance();
+            tenantGroupsCache.put(delegator.getDelegatorName(), groupsCache);
+        }
+        
         if (groupsCache.size() == 0) {
-            ServiceGroupReader.readConfig();
+            ServiceGroupReader.readConfig(delegator);
         }
         return groupsCache.get(serviceName);
     }
Index: framework/service/src/org/ofbiz/service/group/ServiceGroupEngine.java
===================================================================
--- framework/service/src/org/ofbiz/service/group/ServiceGroupEngine.java	(revision 1447126)
+++ framework/service/src/org/ofbiz/service/group/ServiceGroupEngine.java	(working copy)
@@ -45,7 +45,7 @@
     public Map<String, Object> runSync(String localName, ModelService modelService, Map<String, Object> context) throws GenericServiceException {
         GroupModel groupModel = modelService.internalGroup;
         if (groupModel == null) {
-            groupModel = ServiceGroupReader.getGroupModel(this.getLocation(modelService));
+            groupModel = ServiceGroupReader.getGroupModel(this.getLocation(modelService), dispatcher.getDelegator());
         }
         if (groupModel == null) {
             throw new GenericServiceException("GroupModel was null; not a valid ServiceGroup!");
Index: framework/service/src/org/ofbiz/service/ModelServiceReader.java
===================================================================
--- framework/service/src/org/ofbiz/service/ModelServiceReader.java	(revision 1447126)
+++ framework/service/src/org/ofbiz/service/ModelServiceReader.java	(working copy)
@@ -74,12 +74,12 @@
         }
 
         ModelServiceReader reader = new ModelServiceReader(true, readerURL, null, dctx);
-        return reader.getModelServices();
+        return reader.getModelServices(dctx.getDelegator());
     }
 
     public static Map<String, ModelService> getModelServiceMap(ResourceHandler handler, DispatchContext dctx) {
         ModelServiceReader reader = new ModelServiceReader(false, null, handler, dctx);
-        return reader.getModelServices();
+        return reader.getModelServices(dctx.getDelegator());
     }
 
     private ModelServiceReader(boolean isFromURL, URL readerURL, ResourceHandler handler, DispatchContext dctx) {
@@ -89,7 +89,7 @@
         this.dctx = dctx;
     }
 
-    private Map<String, ModelService> getModelServices() {
+    private Map<String, ModelService> getModelServices(Delegator delegator) {
         UtilTimer utilTimer = new UtilTimer();
         Document document;
         if (this.isFromURL) {
@@ -186,7 +186,7 @@
         } else {
             utilTimer.timerString("Finished document in " + handler + " - Total Services: " + i + " FINISHED");
             if (Debug.importantOn()) {
-                Debug.logImportant("Loaded [" + StringUtil.leftPad(Integer.toString(i), 3) + "] Services from " + resourceLocation, module);
+                Debug.logImportant("Loaded [" + delegator.getDelegatorName() + "] [" + StringUtil.leftPad(Integer.toString(i), 3) + "] Services from " + resourceLocation, module);
             }
         }
         return modelServices;
Index: framework/service/src/org/ofbiz/service/ServiceDispatcher.java
===================================================================
--- framework/service/src/org/ofbiz/service/ServiceDispatcher.java	(revision 1447126)
+++ framework/service/src/org/ofbiz/service/ServiceDispatcher.java	(working copy)
@@ -85,8 +85,8 @@
     protected ServiceDispatcher(Delegator delegator, boolean enableJM, boolean enableJMS, boolean enableSvcs) {
         Debug.logInfo("[ServiceDispatcher] : Creating new instance.", module);
         factory = new GenericEngineFactory(this);
-        ServiceGroupReader.readConfig();
-        ServiceEcaUtil.readConfig();
+        ServiceGroupReader.readConfig(delegator);
+        ServiceEcaUtil.readConfig(delegator);
 
         this.delegator = delegator;
         this.localContext = FastMap.newInstance();
@@ -275,7 +275,7 @@
             rs = this.logService(localName, modelService, GenericEngine.SYNC_MODE);
 
             // get eventMap once for all calls for speed, don't do event calls if it is null
-            eventMap = ServiceEcaUtil.getServiceEventMap(modelService.name);
+            eventMap = ServiceEcaUtil.getServiceEventMap(modelService.name, ctx.getDelegator());
             engine = this.getGenericEngine(modelService.engineName);
 
 
@@ -659,7 +659,7 @@
 
             try {
                 // get eventMap once for all calls for speed, don't do event calls if it is null
-                Map<String, List<ServiceEcaRule>> eventMap = ServiceEcaUtil.getServiceEventMap(service.name);
+                Map<String, List<ServiceEcaRule>> eventMap = ServiceEcaUtil.getServiceEventMap(service.name, ctx.getDelegator());
 
                 // pre-auth ECA
                 if (eventMap != null) ServiceEcaUtil.evalRules(service.name, eventMap, "auth", ctx, context, result, isError, isFailure);
Index: framework/service/src/org/ofbiz/service/ModelService.java
===================================================================
--- framework/service/src/org/ofbiz/service/ModelService.java	(revision 1447126)
+++ framework/service/src/org/ofbiz/service/ModelService.java	(working copy)
@@ -1101,7 +1101,7 @@
             if (this.engineName.equals("group") && implServices.size() == 0) {
                 GroupModel group = internalGroup;
                 if (group == null) {
-                    group = ServiceGroupReader.getGroupModel(this.location);
+                    group = ServiceGroupReader.getGroupModel(this.location, dctx.getDelegator());
                 }
                 if (group != null) {
                     for (GroupServiceModel sm: group.getServices()) {
Index: framework/images/webapp/images/WEB-INF/web.xml
===================================================================
--- framework/images/webapp/images/WEB-INF/web.xml	(revision 1447126)
+++ framework/images/webapp/images/WEB-INF/web.xml	(working copy)
@@ -22,6 +22,33 @@
 <web-app>
   <display-name>Open For Business - demostore images</display-name>
   <description>Demo Store Images for the Open For Business Project</description>
+    <context-param>
+        <param-name>localDispatcherName</param-name>
+        <param-value>images</param-value>
+        <description>A unique name used to identify/recognize the local dispatcher for the Service Engine</description>
+    </context-param>
+    <filter>
+        <filter-name>ContextFilter</filter-name>
+        <display-name>ContextFilter</display-name>
+        <filter-class>org.ofbiz.webapp.control.ContextFilter</filter-class>
+        <init-param>
+            <param-name>allowedPaths</param-name>
+            <param-value>/products</param-value>
+        </init-param>
+    </filter>
+    <filter>
+        <filter-name>TenantImageFilter</filter-name>
+        <display-name>TenantImageFilter</display-name>
+        <filter-class>org.ofbiz.tenant.control.TenantImageFilter</filter-class>
+    </filter>
+    <filter-mapping>
+        <filter-name>ContextFilter</filter-name>
+        <url-pattern>/products/*</url-pattern>
+    </filter-mapping>
+    <filter-mapping>
+        <filter-name>TenantImageFilter</filter-name>
+        <url-pattern>/products/*</url-pattern>
+    </filter-mapping>
 
   <session-config>
     <session-timeout>1</session-timeout>
